<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chinglish Small Talk</title>
  
  <subtitle>Tech and Personal Blog of Ofey Chan. Personal articles are in *Archives*.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ofey404.github.io/"/>
  <updated>2019-09-22T01:43:07.967Z</updated>
  <id>http://ofey404.github.io/</id>
  
  <author>
    <name>Ofey Chan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[LOG] 用 python 画带权重的散点图的手册</title>
    <link href="http://ofey404.github.io/2019/09/22/matplotlib-scatter/"/>
    <id>http://ofey404.github.io/2019/09/22/matplotlib-scatter/</id>
    <published>2019-09-22T01:38:44.000Z</published>
    <updated>2019-09-22T01:43:07.967Z</updated>
    
    <content type="html"><![CDATA[<p>简单的任务：画一张带权重的散点图。权重用散点的大小来表示。</p><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote><p>问题产生场景和激发隐藏任务事件/链接/…</p></blockquote><p>画带权重的散点图</p><p><img src="https://matplotlib.org/_images/scatter_demo.png" alt="效果图"></p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><blockquote><p>解决办法适用的环境/版本</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&gt; &#123;screenfetch; conda list numpy; conda list matplotlib&#125;</span><br><span class="line">readlink: illegal option -- f</span><br><span class="line">usage: readlink [-n] [file ...]</span><br><span class="line">                               </span><br><span class="line">                 -/+:.          ofey@OfeydeMacBook-Pro</span><br><span class="line">                :++++.          OS: 64bit Mac OS X 10.14.6 18G95</span><br><span class="line">               /+++/.           Kernel: x86_64 Darwin 18.7.0</span><br><span class="line">       .:-::- .+/:-``.::-       Uptime: 1d 17h 8m</span><br><span class="line">    .:/++++++/::::/++++++/:`    Packages: 115</span><br><span class="line">  .:///////////////////////:`   Shell: zsh 5.3</span><br><span class="line">  ////////////////////////`     Resolution: 2880x1800</span><br><span class="line"> -+++++++++++++++++++++++`      DE: Aqua</span><br><span class="line"> /++++++++++++++++++++++/       WM: Quartz Compositor</span><br><span class="line"> /sssssssssssssssssssssss.      WM Theme: Blue</span><br><span class="line"> :ssssssssssssssssssssssss-     Font: SFMono-Regular</span><br><span class="line">  osssssssssssssssssssssssso/`  CPU: Intel Core i7-8850H @ 2.60GHz</span><br><span class="line">  `syyyyyyyyyyyyyyyyyyyyyyyy+`  GPU: Intel UHD Graphics 630 / Radeon Pro 560X </span><br><span class="line">   `ossssssssssssssssssssss/    RAM: 9051MiB / 16384MiB</span><br><span class="line">     :ooooooooooooooooooo+.    </span><br><span class="line">      `:+oo+/:-..-:/+o+/-      </span><br><span class="line">                               </span><br><span class="line"><span class="comment"># packages in environment at /Users/ofey/miniconda3:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Name                    Version                   Build  Channel</span></span><br><span class="line">numpy                     1.16.4           py37hacdab7b_0  </span><br><span class="line">numpy-base                1.16.4           py37h6575580_0  </span><br><span class="line"><span class="comment"># packages in environment at /Users/ofey/miniconda3:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Name                    Version                   Build  Channel</span></span><br><span class="line">matplotlib                3.1.0            py37h54f8f79_0</span><br></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote><p>详细描述问题的范畴/条件/上下文/…</p></blockquote><ul><li><p>数据的前期处理。</p></li><li><p>散点图的绘制</p></li><li><input disabled type="checkbox"> <p>细粒度的控制：有些有权重，有些没有。（需要么？存疑）</p></li></ul><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><blockquote><p>逐步说明用什么工具, 在哪儿, 进行什么操作, 如何检验, 应该获得什么输出 …</p></blockquote><p>参考了 <a href="https://matplotlib.org/gallery.html" target="_blank" rel="noopener">matplotlib gallery</a>。</p><p>这是一个很棒的网站，上面有大多数普通绘图要求的例子。</p><p>以下代码来自 <a href="https://matplotlib.org/examples/shapes_and_collections/scatter_demo.html" target="_blank" rel="noopener">scatter demo</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Simple demo of a scatter plot.</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">N = <span class="number">50</span></span><br><span class="line">x = np.random.rand(N)</span><br><span class="line">y = np.random.rand(N)</span><br><span class="line">colors = np.random.rand(N)</span><br><span class="line">area = np.pi * (<span class="number">15</span> * np.random.rand(N))**<span class="number">2</span>  <span class="comment"># 0 to 15 point radii</span></span><br><span class="line"></span><br><span class="line">plt.scatter(x, y, s=area, c=colors, alpha=<span class="number">0.5</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>scatter 的手册：<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.scatter.html?highlight=scatter#matplotlib.pyplot.scatter" target="_blank" rel="noopener">matplotlib.pyplot.scatter</a></p><p>重要参数：</p><ul><li>s: marker size. 散点图点的大小。和前面的 x/y array 长度一致。</li><li>c: colors. 散点的颜色。可以传递一个 color string（eg: ‘#bcbd22’，也可以传递长度和 x/y 相同的一个 array）</li></ul><h3 id="如何在实际情况中使用"><a href="#如何在实际情况中使用" class="headerlink" title="如何在实际情况中使用"></a>如何在实际情况中使用</h3><p>将数据读入 python 脚本，并转换成 np.array 格式。</p><p>然后进行必要的处理，colormap 的决定。</p><p>然后绘图。</p><h3 id="标题和坐标轴"><a href="#标题和坐标轴" class="headerlink" title="标题和坐标轴"></a>标题和坐标轴</h3><p>参考绘图<a href="https://matplotlib.org/gallery/lines_bars_and_markers/bar_stacked.html#sphx-glr-gallery-lines-bars-and-markers-bar-stacked-py" target="_blank" rel="noopener">Stacked Bar Graph</a></p><p>参考绘图中的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plt.ylabel(<span class="string">'Scores'</span>)</span><br><span class="line">plt.title(<span class="string">'Scores by group and gender'</span>)</span><br><span class="line">plt.xticks(ind, (<span class="string">'G1'</span>, <span class="string">'G2'</span>, <span class="string">'G3'</span>, <span class="string">'G4'</span>, <span class="string">'G5'</span>))</span><br><span class="line">plt.yticks(np.arange(<span class="number">0</span>, <span class="number">81</span>, <span class="number">10</span>))</span><br><span class="line">plt.legend((p1[<span class="number">0</span>], p2[<span class="number">0</span>]), (<span class="string">'Men'</span>, <span class="string">'Women'</span>))</span><br></pre></td></tr></table></figure><p>手册：</p><ul><li><a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.title.html?highlight=title" target="_blank" rel="noopener">matplotlib.pyplot.title</a></li><li><a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.ylabel.html#matplotlib.pyplot.ylabel" target="_blank" rel="noopener">matplotlib.pyplot.ylabel</a></li><li><a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.xticks.html#matplotlib.pyplot.xticks" target="_blank" rel="noopener">matplotlib.pyplot.xticks</a></li></ul><p>title 通过参数可以控制字体，位置和对齐（左中右）。但是一般情况下（参考 gallery 的<a href="https://matplotlib.org/gallery/lines_bars_and_markers/bar_stacked.html#sphx-glr-gallery-lines-bars-and-markers-bar-stacked-py" target="_blank" rel="noopener">例子</a>）直接<code>plt.title(&#39;My Title&#39;)</code>就完事了。</p><h3 id="中文问题"><a href="#中文问题" class="headerlink" title="中文问题"></a>中文问题</h3><p>Mac 的 matplotlib 在图片中插中文字会变成方块。</p><p>目前没什么解法……主要字体问题很麻烦，懒得去弄。</p><p>尽量避免吧……</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>再次说明经验应用要注意的, 容易出问题的点, 以及有助记忆的作弊条…</p></blockquote><p>用 scatter 绘图。内置了需要的所有功能。</p><h2 id="refer"><a href="#refer" class="headerlink" title="refer"></a>refer</h2><blockquote><p>过程中参考过的重要文章/图书/模块/代码/…</p></blockquote><p>永远的: <a href="https://gitlab.com/101camp/2py/tasks/wikis/HandBooks/Hb4Ask" target="_blank" rel="noopener">如何提问</a></p><p><a href="https://matplotlib.org/gallery.html" target="_blank" rel="noopener">matplotlib gallery</a></p><h2 id="logging"><a href="#logging" class="headerlink" title="logging:"></a>logging:</h2><blockquote><p>用倒序日期排列来从旧到新记要关键变化</p></blockquote><ul><li>190922 ofey404 init</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单的任务：画一张带权重的散点图。权重用散点的大小来表示。&lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://ofey404.github.io/categories/Programming/"/>
    
      <category term="data science" scheme="http://ofey404.github.io/categories/Programming/data-science/"/>
    
    
      <category term="lan-chinese" scheme="http://ofey404.github.io/tags/lan-chinese/"/>
    
      <category term="handbook" scheme="http://ofey404.github.io/tags/handbook/"/>
    
      <category term="matplotlib" scheme="http://ofey404.github.io/tags/matplotlib/"/>
    
      <category term="scatter plot" scheme="http://ofey404.github.io/tags/scatter-plot/"/>
    
  </entry>
  
  <entry>
    <title>[LOG] 在 macOS Mojave 上使用 gdb 的手册……</title>
    <link href="http://ofey404.github.io/2019/09/18/macos-gdb/"/>
    <id>http://ofey404.github.io/2019/09/18/macos-gdb/</id>
    <published>2019-09-18T03:20:00.000Z</published>
    <updated>2019-09-22T01:40:46.378Z</updated>
    
    <content type="html"><![CDATA[<p>用 brew 直接 install 的 gdb 在 macOS Mojave 上有大问题，大概是因为 macOS 的安全政策收紧。</p><p>解法分三步：</p><ul><li>从源码编译可靠版本的gdb</li><li>用 mac 钥匙串给 gdb 签名。</li><li>配置 <code>~/.gdbinit</code> 文件</li></ul><p>搞死我了……</p><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote><p>问题产生场景和激发隐藏任务事件/链接/…</p></blockquote><p>想用 gdb 调试 fortran。好像也只有 gdb 可以调试 fortran，osx 的 lldb 不支持。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><blockquote><p>解决办法适用的环境/版本</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&gt; screenfetch ; gcc -v ; gdb -v</span><br><span class="line">readlink: illegal option -- f</span><br><span class="line">usage: readlink [-n] [file ...]</span><br><span class="line"></span><br><span class="line">                 -/+:.          ofey@OfeydeMacBook-Pro</span><br><span class="line">                :++++.          OS: 64bit Mac OS X 10.14.6 18G95</span><br><span class="line">               /+++/.           Kernel: x86_64 Darwin 18.7.0</span><br><span class="line">       .:-::- .+/:-``.::-       Uptime: 11h 49m</span><br><span class="line">    .:/++++++/::::/++++++/:`    Packages: 111</span><br><span class="line">  .:///////////////////////:`   Shell: zsh 5.3</span><br><span class="line">  ////////////////////////`     Resolution: 2880x1800</span><br><span class="line"> -+++++++++++++++++++++++`      DE: Aqua</span><br><span class="line"> /++++++++++++++++++++++/       WM: Quartz Compositor</span><br><span class="line"> /sssssssssssssssssssssss.      WM Theme: Blue</span><br><span class="line"> :ssssssssssssssssssssssss-     Font: RobotoMonoForPowerline-Regular 12</span><br><span class="line">  osssssssssssssssssssssssso/`  CPU: Intel Core i7-8850H @ 2.60GHz</span><br><span class="line">  `syyyyyyyyyyyyyyyyyyyyyyyy+`  GPU: Intel UHD Graphics 630 / Radeon Pro 560X</span><br><span class="line">   `ossssssssssssssssssssss/    RAM: 9312MiB / 16384MiB</span><br><span class="line">     :ooooooooooooooooooo+.</span><br><span class="line">      `:+oo+/:-..-:/+o+/-</span><br><span class="line"></span><br><span class="line">Configured with: --prefix=/Library/Developer/CommandLineTools/usr --with-gxx-include-dir=/Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/c++/4.2.1</span><br><span class="line">Apple LLVM version 10.0.1 (clang-1001.0.46.4)</span><br><span class="line">Target: x86_64-apple-darwin18.7.0</span><br><span class="line">Thread model: posix</span><br><span class="line">InstalledDir: /Library/Developer/CommandLineTools/usr/bin</span><br><span class="line">GNU gdb (GDB) 8.2.50.20190226-git</span><br><span class="line">Copyright (C) 2019 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote><p>详细描述问题的范畴/条件/上下文/…</p></blockquote><p>原本是用 homebrew 安装的 gdb，出现如下问题：</p><p>gdb 出现 Unable to find Mach Port。类似这个Issue下出现的：<a href="https://github.com/cs01/gdbgui/issues/55" target="_blank" rel="noopener">Unable to find Mach task port #55</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Unable to find Mach task port <span class="keyword">for</span> process-id 19311: (os/kern) failure (0x5).\n (please check gdb is codesigned - see taskgated(8))</span><br></pre></td></tr></table></figure><p>gdb 签名之后直接跑死，输出为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(gdb) run</span><br><span class="line">Starting program: /Users/tnash/AppProjects/password/target/debug/password</span><br><span class="line">Note: this version of macOS has System Integrity Protection.</span><br><span class="line">Because `startup-with-shell<span class="string">' is enabled, gdb has worked around this by</span></span><br><span class="line"><span class="string">caching a copy of your shell.  The shell used by "run" is now:</span></span><br><span class="line"><span class="string">    /Users/tnash/Library/Caches/gdb/bin/zsh</span></span><br><span class="line"><span class="string">[New Thread 0xc03 of process 27325]</span></span><br><span class="line"><span class="string">[New Thread 0xe03 of process 27325]</span></span><br></pre></td></tr></table></figure><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><blockquote><p>逐步说明用什么工具, 在哪儿, 进行什么操作, 如何检验, 应该获得什么输出 …</p></blockquote><p>参考了该文章：<a href="https://timnash.co.uk/getting-gdb-to-semi-reliably-work-on-mojave-macos/" target="_blank" rel="noopener">Getting gdb to (semi) reliably work on Mojave MacOS</a></p><p>救命了……</p><p>详细参考上面的英文文章，以下只对我的操作做记录。</p><h2 id="从源码编译可靠版本的gdb"><a href="#从源码编译可靠版本的gdb" class="headerlink" title="从源码编译可靠版本的gdb"></a>从源码编译可靠版本的gdb</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wget ftp://sourceware.org/pub/gdb/snapshots/current/gdb-weekly-8.2.50.20190226.tar.xz</span><br><span class="line"><span class="comment"># 在桌面上</span></span><br><span class="line">untar gdb-weekly-8.2.50.20190226.tar.xz</span><br><span class="line">gdb-8.2.50.20190226</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"><span class="comment"># 最后把 gdb 的 source 放到 ~/Packages 目录底下去了</span></span><br></pre></td></tr></table></figure><h2 id="用-mac-钥匙串给-gdb-签名。"><a href="#用-mac-钥匙串给-gdb-签名。" class="headerlink" title="用 mac 钥匙串给 gdb 签名。"></a>用 mac 钥匙串给 gdb 签名。</h2><p>先生成license，参考英文文章。</p><p>之后进行如下操作</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">cat gdb.xml</span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE plist PUBLIC <span class="string">"-//Apple//DTD PLIST 1.0//EN"</span></span><br><span class="line"><span class="string">"http://www.apple.com/DTDs/PropertyList-1.0.dtd"</span>&gt;</span><br><span class="line">&lt;plist version=<span class="string">"1.0"</span>&gt;</span><br><span class="line">&lt;dict&gt;</span><br><span class="line">    &lt;key&gt;com.apple.security.cs.allow-jit&lt;/key&gt;</span><br><span class="line">    &lt;<span class="literal">true</span>/&gt;</span><br><span class="line">    &lt;key&gt;com.apple.security.cs.allow-unsigned-executable-memory&lt;/key&gt;</span><br><span class="line">    &lt;<span class="literal">true</span>/&gt;</span><br><span class="line">    &lt;key&gt;com.apple.security.cs.allow-dyld-environment-variables&lt;/key&gt;</span><br><span class="line">    &lt;<span class="literal">true</span>/&gt;</span><br><span class="line">    &lt;key&gt;com.apple.security.cs.disable-library-validation&lt;/key&gt;</span><br><span class="line">    &lt;<span class="literal">true</span>/&gt;</span><br><span class="line">    &lt;key&gt;com.apple.security.cs.disable-executable-page-protection&lt;/key&gt;</span><br><span class="line">    &lt;<span class="literal">true</span>/&gt;</span><br><span class="line">    &lt;key&gt;com.apple.security.cs.debugger&lt;/key&gt;</span><br><span class="line">    &lt;<span class="literal">true</span>/&gt;</span><br><span class="line">    &lt;key&gt;com.apple.security.get-task-allow&lt;/key&gt;</span><br><span class="line">    &lt;<span class="literal">true</span>/&gt;</span><br><span class="line">&lt;/dict&gt;</span><br><span class="line">&lt;/plist&gt;</span><br><span class="line"></span><br><span class="line">codesign --entitlements gdb.xml -fs gdb-cert /usr/<span class="built_in">local</span>/bin/gdb</span><br></pre></td></tr></table></figure><h2 id="配置-gdbinit-文件"><a href="#配置-gdbinit-文件" class="headerlink" title="配置 ~/.gdbinit 文件"></a>配置 <code>~/.gdbinit</code> 文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"set startup-with-shell off"</span> &gt;&gt; ~/.gdbinit</span><br></pre></td></tr></table></figure><p>参考了：<a href="https://github.com/cyrus-and/gdb-dashboard/issues/81" target="_blank" rel="noopener"><code>set startup-with-shell off</code> required by macOS Sierra+ #81</a></p><p>和<a href="https://stackoverflow.com/questions/9573683/where-is-gdbinit-is-located-and-how-can-i-edit-it" target="_blank" rel="noopener">Where is .gdbinit is located and how can I edit it?</a></p><h2 id="验证安装完成"><a href="#验证安装完成" class="headerlink" title="验证安装完成"></a>验证安装完成</h2><p>按照<a href="https://undo.io/resources/debugging-fortran-code-gdb/" target="_blank" rel="noopener">How to Debug Fortran Code with GDB</a>操作。能得到合理的输出。</p><h2 id="uninstall"><a href="#uninstall" class="headerlink" title="uninstall"></a>uninstall</h2><p>备查：<a href="https://stackoverflow.com/questions/1439950/whats-the-opposite-of-make-install-i-e-how-do-you-uninstall-a-library-in-li" target="_blank" rel="noopener">What’s the opposite of ‘make install’, i.e. how do you uninstall a library in Linux?</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>再次说明经验应用要注意的, 容易出问题的点, 以及有助记忆的作弊条…</p></blockquote><ul><li>从源码编译可靠版本的gdb</li><li>用 mac 钥匙串给 gdb 签名。</li><li>配置 <code>~/.gdbinit</code> 文件</li></ul><p>遇到编程问题还是要直接搜洋文……</p><p>要熟悉「从源码编译」了……不能老是有<code>make</code>恐惧症。</p><p>macOS 确实也有一些兼容性问题。但是……我升级到了 Catalina 之后怎么办？？？</p><h2 id="refer"><a href="#refer" class="headerlink" title="refer"></a>refer</h2><blockquote><p>过程中参考过的重要文章/图书/模块/代码/…</p></blockquote><p>永远的: <a href="https://gitlab.com/101camp/2py/tasks/wikis/HandBooks/Hb4Ask" target="_blank" rel="noopener">如何提问</a></p><p>超级重要的参考……<a href="https://timnash.co.uk/getting-gdb-to-semi-reliably-work-on-mojave-macos/" target="_blank" rel="noopener">Getting gdb to (semi) reliably work on Mojave MacOS</a></p><h2 id="logging"><a href="#logging" class="headerlink" title="logging:"></a>logging:</h2><blockquote><p>用倒序日期排列来从旧到新记要关键变化</p></blockquote><ul><li>190918 ofey404 init</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用 brew 直接 install 的 gdb 在 macOS Mojave 上有大问题，大概是因为 macOS 的安全政策收紧。&lt;/p&gt;
&lt;p&gt;解法分三步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从源码编译可靠版本的gdb&lt;/li&gt;
&lt;li&gt;用 mac 钥匙串给 gdb 签名。&lt;/li&gt;
&lt;li&gt;配置 &lt;code&gt;~/.gdbinit&lt;/code&gt; 文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;搞死我了……&lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://ofey404.github.io/categories/Programming/"/>
    
      <category term="computational physics" scheme="http://ofey404.github.io/categories/Programming/computational-physics/"/>
    
    
      <category term="lan-chinese" scheme="http://ofey404.github.io/tags/lan-chinese/"/>
    
      <category term="handbook" scheme="http://ofey404.github.io/tags/handbook/"/>
    
      <category term="gdb" scheme="http://ofey404.github.io/tags/gdb/"/>
    
  </entry>
  
  <entry>
    <title>本博客喜提 gitalk 评论区</title>
    <link href="http://ofey404.github.io/2019/09/16/gitalk-comment/"/>
    <id>http://ofey404.github.io/2019/09/16/gitalk-comment/</id>
    <published>2019-09-16T07:21:11.000Z</published>
    <updated>2019-09-16T07:24:19.502Z</updated>
    
    <content type="html"><![CDATA[<p>只要有 github 账号就可以留言了。</p><a id="more"></a><p>参照以下这位大哥的操作指南。写得非常详细。</p><p>Post author: asdfv1929</p><p>Post link: <a href="https://asdfv1929.github.io/2018/01/20/gitalk/" target="_blank" rel="noopener">https://asdfv1929.github.io/2018/01/20/gitalk/</a></p><p>Copyright Notice: All articles in this blog are licensed under CC BY-NC-SA 3.0 unless stating additionally.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;只要有 github 账号就可以留言了。&lt;/p&gt;
    
    </summary>
    
      <category term="Digital Life" scheme="http://ofey404.github.io/categories/Digital-Life/"/>
    
    
      <category term="blog" scheme="http://ofey404.github.io/tags/blog/"/>
    
      <category term="gitalk" scheme="http://ofey404.github.io/tags/gitalk/"/>
    
  </entry>
  
  <entry>
    <title>[LOG] 「计算物理基础」课程环境搭建手册</title>
    <link href="http://ofey404.github.io/2019/09/11/fortran-env/"/>
    <id>http://ofey404.github.io/2019/09/11/fortran-env/</id>
    <published>2019-09-11T08:41:04.000Z</published>
    <updated>2019-09-14T04:56:46.250Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>日常手册/指北 分享</p></blockquote><h2 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h2><blockquote><p>简洁描述可以以及如何解决当前问题</p></blockquote><p>「计算物理基础」课程的开发环境搭建。</p><p>有问题可以咨询我，或者想要补充。联系方式：</p><ul><li>email：<a href="mailto:ofey206@gmail.com" target="_blank" rel="noopener">ofey206@gmail.com</a></li><li>wechat：ofey404</li><li>南区一期二号楼3013</li></ul><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote><p>问题产生场景和激发隐藏任务事件/链接/…</p></blockquote><p>「计算物理基础」课程需要搭建开发环境，但是老师让同学们各显神通……我觉得这会是一场灾难……有许多肉眼可见的坑……</p><p>我希望让大家都用上优雅的环境，而且 MIT 等等的公开课，无不提供完整的环境 tutorial。环境很重要。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><blockquote><p>解决办法适用的环境/版本</p></blockquote><p>windows 10，mac。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote><p>详细描述问题的范畴/条件/上下文/…</p></blockquote><ul><li>如何安装 fortran？</li><li>如何编译运行程序？</li><li>如何编写得更爽一些？</li></ul><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><blockquote><p>逐步说明用什么工具, 在哪儿, 进行什么操作, 如何检验, 应该获得什么输出 …</p></blockquote><h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><p>太长不看版：</p><ul><li><a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10" target="_blank" rel="noopener">wsl 官方指南</a></li><li><a href="https://code.visualstudio.com/docs/remote/remote-overview" target="_blank" rel="noopener">vscode remote 手册</a></li></ul><p>有同学跟我说，「是不是要装 vs 2003」……我觉得不行。</p><ol><li>fortran 原本是 unix 软件，在 windows 上算移植，想想都很坑</li><li>在 9012 年装 vs 2003，不光很不爽，而且很不靠谱，更别提 vs 是个装了就很难卸掉的主。</li></ol><p>推荐方案 wsl + vscode remote。原生 linux 开发体验。</p><p>wsl——windows subsystem of linux。相当于系统级的超轻量级 linux 虚拟机。我们在它里面安装 fortran，然后使用 vscode 远程功能在里面开发，和本机效果一样。</p><h3 id="wsl-安装"><a href="#wsl-安装" class="headerlink" title="wsl 安装"></a>wsl 安装</h3><p>参考 <a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10" target="_blank" rel="noopener">官方指南</a></p><p>先打开管理员模式的 powershell 运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux</span><br></pre></td></tr></table></figure><p>不知道 powershell 是什么？</p><ol><li>bing / google</li><li>win+x在弹出菜单里选「管理员模式打开 powershell」</li></ol><p>打开 M$ Store （windows 应用商店）搜索 wsl 或者 windows subsystem of linux. 安装。</p><p>ubuntu 16.04就行。</p><p>反馈：M$ store 中不显示版本号，据我查看，默认是 18.04。<strong>所以下面要换源的话，请换 18.04 的源。</strong></p><p>安装完成之后，在开始菜单，所有程序里会多一个 ubuntu。点击，打开一个命令行界面。</p><p>会让你输入 unix 用户名和密码。设置就好，记住它们。</p><h3 id="应用商店上不了？"><a href="#应用商店上不了？" class="headerlink" title="应用商店上不了？"></a>应用商店上不了？</h3><p>因为垃圾 GFW 或者 M$ 本身菜鸡的原因，有的人应用商店上不了。</p><p>其实手册里是有说<a href="https://docs.microsoft.com/en-us/windows/wsl/install-manual" target="_blank" rel="noopener">怎么解决这个问题的。</a></p><p>手动下载一个 appimage，然后运行一行命令就可以了。然而由于垃圾 GFW，该 image 下载奇慢无比。</p><p>我已经下好了，放在小红星书库-「计算物理参考」。链接: <a href="https://pan.baidu.com/s/1PWg-0N-YpGuim6vJ5rCb1w" target="_blank" rel="noopener">https://pan.baidu.com/s/1PWg-0N-YpGuim6vJ5rCb1w</a> 提取码: ga2j</p><p>下载到某个目录，打开管理员模式的 powershell，运行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd C:\...(你放程序的目录)\</span><br><span class="line">Add-AppxPackage .\Ubuntu_1604.2019.523.0_x64.appx</span><br></pre></td></tr></table></figure><p>就会安装好了。</p><h3 id="安装-fortran"><a href="#安装-fortran" class="headerlink" title="安装 fortran"></a>安装 fortran</h3><p>打开 ubuntu（wsl）的命令行。执行如下语句，以下的语句对 16.04 和 18.04 都是通用的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update (如果很慢就不执行算了)</span><br><span class="line">sudo apt-get install gfortran</span><br></pre></td></tr></table></figure><p><strong>如果下载和update非常慢</strong><br>因为墙的缘故。换国内源。<a href="https://mirror.tuna.tsinghua.edu.cn/help/ubuntu/" target="_blank" rel="noopener">参考清华源说明。</a></p><p>如果是16.04 在上面链接的页面上选择 <code>ubuntu 16.04 LTS</code>，如果是 m$ store 版本请选择 18.04</p><p>在wsl命令行执行以下代码：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mv /etc/apt/sources.list /etc/apt/sources.list.backup <span class="comment"># 备份原来的源</span></span><br><span class="line">sudo nano /etc/apt/sources.list  <span class="comment"># 这条命令会打开一个编辑器。创建新的 sources.list</span></span><br></pre></td></tr></table></figure><p><strong>坑：有的同学并不知道上面的第二条命令是打开编辑器，结果把 sources.list 备份之后没有创建新的 sources.list</strong></p><p>在打开的编辑器界面中复制<strong>在<a href="https://mirror.tuna.tsinghua.edu.cn/help/ubuntu/" target="_blank" rel="noopener">清华源</a>上看到的，类似以下</strong>的所有代码，然后ctrl-x，再按 Y 保存退出。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">################### 不理解的话，请不要直接复制这些配置！ #########</span></span><br><span class="line"><span class="comment"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse</span></span><br></pre></td></tr></table></figure><p>然后再<code>apt-get update</code>，<code>apt-get install gfortran</code></p><p>install 跑完之后，在命令行里输入<code>gfortran</code>，会有如下反应，证明 fortran 安装完毕。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(base)  ofey &gt; gfortran</span><br><span class="line">gfortran: fatal error: no input files</span><br><span class="line">compilation terminated.</span><br></pre></td></tr></table></figure><h3 id="fortran-hello-world"><a href="#fortran-hello-world" class="headerlink" title="fortran hello world"></a>fortran hello world</h3><p>用命令行编译运行。书上应该会教，我就不手把手了。</p><p>命令行很多人显然从没接触过。linux bash（命令行）的教程推荐：</p><ul><li><a href="https://www.kancloud.cn/thinkphp/linux-command-line/39431" target="_blank" rel="noopener">the linux command line （中文）</a></li></ul><h3 id="vscode-远程"><a href="#vscode-远程" class="headerlink" title="vscode 远程"></a>vscode 远程</h3><p>其实有命令行已经可以写 fortran 程序了。为了写得更爽一些，我们需要一个漂亮的现代编辑器。</p><p><a href="https://code.visualstudio.com" target="_blank" rel="noopener">安装 vscode。</a></p><p>打开「插件」（左侧从上往下数第五个图标，是几个方块）。搜索<code>remote development</code></p><p>远程开发插件使用参照<a href="https://code.visualstudio.com/docs/remote/wsl" target="_blank" rel="noopener">官方手册</a>，或者我给你讲：</p><p>安装插件 Remote Development。安完之后 vscode 左下角会多一个绿色按钮，按钮上一个大于号一个小于号。</p><p>（一定要）打开之前安装的 wsl 的命令行，不然 vscode 不会知道有 wsl。</p><p>按该按钮，选择 remote-wsl。连上了就完事了。现在你保存文件，就是在 wsl 里保存，写代码，编译，运行用的都是 wsl 里面的 fortran 了。</p><p>按 ctrl+` 打开命令行（bash），用命令编译。</p><h3 id="mac"><a href="#mac" class="headerlink" title="mac"></a>mac</h3><p><code>brew install gfortran</code>然后就完事了。mac 是类 unix 系统，少许多麻烦事。</p><p>不认识该命令请 google/bing ‘homebrew’。</p><h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><p>你能拿 linux 发行版来做日常系统，那不需要我教了，我们交个朋友吧（我日常用过半年 linux）。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>再次说明经验应用要注意的, 容易出问题的点, 以及有助记忆的作弊条…</p></blockquote><p>windows:</p><ul><li>wsl 安装</li><li>fortran 安装</li><li>vscode remote 配置。</li></ul><h2 id="refer"><a href="#refer" class="headerlink" title="refer"></a>refer</h2><blockquote><p>过程中参考过的重要文章/图书/模块/代码/…</p></blockquote><p>永远的: <a href="https://gitlab.com/101camp/2py/tasks/wikis/HandBooks/Hb4Ask" target="_blank" rel="noopener">如何提问</a></p><ul><li><a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10" target="_blank" rel="noopener">wsl 官方指南</a></li><li><a href="https://code.visualstudio.com/docs/remote/remote-overview" target="_blank" rel="noopener">vscode remote 手册</a></li></ul><h2 id="logging"><a href="#logging" class="headerlink" title="logging:"></a>logging:</h2><blockquote><p>用倒序日期排列来从旧到新记要关键变化</p></blockquote><ul><li>190911 ofey404 init</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;日常手册/指北 分享&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;综述&quot;&gt;&lt;a href=&quot;#综述&quot; class=&quot;headerlink&quot; title=&quot;综述&quot;&gt;&lt;/a&gt;综述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;简洁描述可以以及如何解决当前问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;「计算物理基础」课程的开发环境搭建。&lt;/p&gt;
&lt;p&gt;有问题可以咨询我，或者想要补充。联系方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;email：&lt;a href=&quot;mailto:ofey206@gmail.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ofey206@gmail.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;wechat：ofey404&lt;/li&gt;
&lt;li&gt;南区一期二号楼3013&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://ofey404.github.io/categories/Programming/"/>
    
      <category term="computational physics" scheme="http://ofey404.github.io/categories/Programming/computational-physics/"/>
    
    
      <category term="lan-chinese" scheme="http://ofey404.github.io/tags/lan-chinese/"/>
    
      <category term="handbook" scheme="http://ofey404.github.io/tags/handbook/"/>
    
      <category term="fortran" scheme="http://ofey404.github.io/tags/fortran/"/>
    
      <category term="wsl" scheme="http://ofey404.github.io/tags/wsl/"/>
    
  </entry>
  
  <entry>
    <title>[LOG] 我的技术笔记编辑器选择之路</title>
    <link href="http://ofey404.github.io/2019/08/05/tech-note-editor/"/>
    <id>http://ofey404.github.io/2019/08/05/tech-note-editor/</id>
    <published>2019-08-05T02:40:41.000Z</published>
    <updated>2019-08-05T02:43:21.706Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>日常手册/指北 分享</p></blockquote><p>如何选择一个用起来省心且爽的技术笔记编辑器。</p><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote><p>问题产生场景和激发隐藏任务事件/链接/…</p></blockquote><p>笔记就像「岩钉」，可以在你掉下去的时候拉住你——走神的时候、中间间隔很长一段时间没做事的时候、踩到坑的时候。</p><p>在 handbook template 底下，没有什么不应该记。即使是对现状的理解、下一步怎么做的想法，也可以在条件允许的情况下记下来。</p><p>所以对技术笔记显然有一个需求——选择合适的编辑器，让编辑体验变好，笔记效率提升。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><blockquote><p>解决办法适用的环境/版本</p></blockquote><p>Mac OS X。</p><p>也提供了 windows 和 linux 下的类似物的讨论。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote><p>详细描述问题的范畴/条件/上下文/…</p></blockquote><p>技术笔记记录的需求</p><ul><li>对代码支持良好<ul><li>word 等富文本基本 pass</li></ul></li><li>编辑速度快<ul><li>富文本再次 pass</li></ul></li><li>有可能会有图片<ul><li>纯 markdown 在这里有一些劣势，图片会把目录树结构搞得乱七八糟</li><li>库结构文件管理+增强markdown格式可以比较舒服地解决该痛点</li></ul></li><li>发布方便<ul><li>markdown，或者对导出支持良好的编辑器。</li></ul></li></ul><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><blockquote><p>逐步说明用什么工具, 在哪儿, 进行什么操作, 如何检验, 应该获得什么输出 …</p></blockquote><p>现在在记技术笔记用的是 quiver，表达类写作使用 setapp 里白嫖的 ulysses。编辑散的 markdown 文档使用的是 vscode。这些选择并不是唯一的「最好」，而是和我工作流程、手上设备较为契合的「选择」。</p><p>我用过的笔记类软件/编辑器不完全清单：<br>evernote onenote goodnote boostnote noteability typora vscode vim spacemacs wonderpen quiver</p><h3 id="文件管理–外包-vs-库模式？"><a href="#文件管理–外包-vs-库模式？" class="headerlink" title="文件管理–外包 vs 库模式？"></a>文件管理–外包 vs 库模式？</h3><p>有的编辑器根本不操心文件管理，遵守了 unix 哲学。这方面的典型就是 <a href="https://typora.io" target="_blank" rel="noopener">Typora</a>.</p><p>只在编辑纯 markdown 的体验上，Typora 大概是目前最好的——且开源免费。</p><p>但是纯 markdown 面临着图片和文档不在一个文件中的问题，给移动、管理文档带来很大麻烦。</p><ul><li>放图床<ul><li>图床容易挂</li></ul></li><li>一个笔记一个文件夹，文件夹里放图片，便于移动<ul><li>平白无故多出一层目录结构</li></ul></li><li>一类笔记统一放一个文件夹<ul><li>单条移动麻烦，也相当于自己手动维护了一个笔记软件</li></ul></li><li>图片转成字符串存在笔记里<ul><li>丑</li></ul></li></ul><p>库结构还可以实现一些纯 markdown 没有的功能，比如说笔记标签。</p><p>总结：</p><ul><li>纯 markdown + 自己管理文件<ul><li>图片麻烦</li><li>工具链简单，hackable</li></ul></li><li>库结构<ul><li>封闭</li><li>可以实现一些额外功能</li><li>图片 ok</li></ul></li></ul><h3 id="vim-编辑模式"><a href="#vim-编辑模式" class="headerlink" title="vim 编辑模式"></a>vim 编辑模式</h3><p>vim 编辑模式重要么？中文输入法下 vim 键位绑定往往会有一些问题，例如退出插入模式之后输入先被输入法捕捉。有插件可以解决问题，vscode、 vim、spacemacs 都提供这种插件，但是麻烦。</p><p>还有一个加快编辑时移动速度的方案，使用 emacs 键绑定避免和中文输入冲突。mac 系统级自带了这种移动方式——c-f right; c-b left; c-p up; c-n down，深得我心。所有 mac 平台上的编辑器都可以享受这种福利。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>再次说明经验应用要注意的, 容易出问题的点, 以及有助记忆的作弊条…</p></blockquote><p>分歧点</p><ul><li>图片支持</li><li>库模式/自己管理文件</li></ul><table><thead><tr><th align="center">编辑器</th><th>编辑爽度</th><th>代码支持</th><th>自带文件管理</th><th>图片支持</th><th>扩展性/插件</th><th>vim模式</th></tr></thead><tbody><tr><td align="center">vscode</td><td>+</td><td>+++</td><td>-</td><td>-</td><td>+++</td><td>+</td></tr><tr><td align="center">typora</td><td>+++</td><td>+</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td align="center">quiver</td><td>++</td><td>++</td><td>+</td><td>+</td><td>-</td><td>-</td></tr><tr><td align="center">boostnote</td><td>+</td><td>++</td><td>+</td><td>?</td><td>+</td><td>+</td></tr><tr><td align="center">vim/spacemacs</td><td>+++</td><td>++</td><td>-</td><td>-</td><td>+++</td><td>+</td></tr></tbody></table><p>平台支持</p><ul><li>win<ul><li>typora</li><li>vscode</li><li>boostnote</li></ul></li><li>mac<ul><li>typora</li><li>vscode</li><li>boostnote</li><li>quiver</li><li>vim/emacs</li></ul></li><li>linux<ul><li>typora</li><li>vscode</li><li>boostnote</li><li>vim/emacs</li></ul></li></ul><h2 id="refer"><a href="#refer" class="headerlink" title="refer"></a>refer</h2><blockquote><p>过程中参考过的重要文章/图书/模块/代码/…</p></blockquote><p>永远的: <a href="https://gitlab.com/101camp/2py/tasks/wikis/HandBooks/Hb4Ask" target="_blank" rel="noopener">如何提问</a></p><h2 id="logging"><a href="#logging" class="headerlink" title="logging:"></a>logging:</h2><blockquote><p>用倒序日期排列来从旧到新记要关键变化</p></blockquote><ul><li>190805 ofey init</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;日常手册/指北 分享&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如何选择一个用起来省心且爽的技术笔记编辑器。&lt;/p&gt;
    
    </summary>
    
      <category term="Digital Life" scheme="http://ofey404.github.io/categories/Digital-Life/"/>
    
    
      <category term="lan-chinese" scheme="http://ofey404.github.io/tags/lan-chinese/"/>
    
      <category term="productivity" scheme="http://ofey404.github.io/tags/productivity/"/>
    
      <category term="handbook" scheme="http://ofey404.github.io/tags/handbook/"/>
    
      <category term="writing" scheme="http://ofey404.github.io/tags/writing/"/>
    
  </entry>
  
  <entry>
    <title>[LOG] 笔记从记录到可发布，最核心的变化是哪几点？</title>
    <link href="http://ofey404.github.io/2019/08/01/relese-a-note/"/>
    <id>http://ofey404.github.io/2019/08/01/relese-a-note/</id>
    <published>2019-08-01T08:56:24.000Z</published>
    <updated>2019-08-05T02:42:53.420Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>日常手册/指北 分享</p></blockquote><h2 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h2><p>总结从笔记记录到「可发布」笔记产生的工作流程，以统合知识管理不同阶段的目标：</p><ul><li>记录阶段：<ul><li>历史可追溯，踩坑可复现</li><li>时间顺序——对修改、增加开放</li></ul></li><li>发布阶段：<ul><li>逻辑顺序——简洁易读</li></ul></li></ul><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote><p>问题产生场景和激发隐藏任务事件/链接/…</p></blockquote><p>来自微信群中和大妈的对话。</p><blockquote><p>「 ofey404: 在笔记形成的过程中自然就会整理到可发布的状态了 」</p><hr><p>是也乎,(￣▽￣)<br>恭喜深夜叕触发一个 SM:</p><ul><li>24 小时以内</li><li>创建 Issue 用 Handbook 模板</li><li>分享自己理解的: 笔记从记录到可发布, 最核心的变化是哪几点?</li><li>简单的说, 文档的可发布状态应该吻合哪几个指标?</li></ul></blockquote><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><blockquote><p>解决办法适用的环境/版本</p></blockquote><p>常用笔记软件一只。eg：Quiver （自用）、Evernote、记事本……</p><p>发布平台一个。eg：blog、知乎、gitlab issues</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote><p>详细描述问题的范畴/条件/上下文/…</p></blockquote><p>知识管理的「记录」与「发布」阶段有一些目标是矛盾的。</p><ul><li>「记录」需要详尽、可增补、不管对错。所以有如下特点：<ul><li>时间顺序，至少主体是时间顺序</li><li>应该有完成的所有操作的信息，走过的所有「弯路」</li></ul></li><li>「发布」需要简洁易读。<ul><li>逻辑顺序</li><li>只留下「直路」和「有意义的坑」</li></ul></li></ul><p>为了减少从记录到发布的修改，记录的 template 应该和发布的相近；同时又具有可延展性。</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><blockquote><p>逐步说明用什么工具, 在哪儿, 进行什么操作, 如何检验, 应该获得什么输出 …</p></blockquote><p>工作流程：</p><p><code>记录的template - 记录 - 归档记录 - 在记录的基础上尽可能小调节 - 形成发布版</code></p><p>我现在的流程是，直接使用 [LOG] 的 template 作为「记录」的 template，就是本文使用的 template。</p><p>在记录时，「操作」二级标题下用于记录具体操作，并在每一天第一次记录的时候打上日期时间戳（灵感来自实验记录软件 findings，该软件因为无法导出 markdown 被我雪藏了）</p><p>任务完成，记录关闭后，我选择复制一份作为发布的底版，保存到特定的 release 目录下/打上 release 的 tag，保留并归档包含完整信息的记录。</p><p>将 release 副本的「操作」标题下的内容精简成「直路」，把最主要的坑单独列出来放到「总结」中。</p><p>一份可发布的文档完成。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>再次说明经验应用要注意的, 容易出问题的点, 以及有助记忆的作弊条…</p></blockquote><p>笔记从记录到可发布, 最核心的变化：</p><ol><li>时间顺序 - 逻辑顺序</li><li>信息完全 - 信息简明</li></ol><p>记录的 template 设计时就需要考虑到发布的情况。</p><p>「发布」不仅是公开发布，在自己的知识管理中增加这一道工序也是有益的——不仅可以降低大量 raw material 带来的认知负荷，而且合理的整理可以花少量时间达到复习的效果。</p><h2 id="refer"><a href="#refer" class="headerlink" title="refer"></a>refer</h2><blockquote><p>过程中参考过的重要文章/图书/模块/代码/…</p></blockquote><p>永远的: <a href="https://gitlab.com/101camp/2py/tasks/wikis/HandBooks/Hb4Ask" target="_blank" rel="noopener">如何提问</a></p><h2 id="logging"><a href="#logging" class="headerlink" title="logging:"></a>logging:</h2><blockquote><p>用倒序日期排列来从旧到新记要关键变化</p></blockquote><ul><li>190801 ofey init</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;日常手册/指北 分享&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;综述&quot;&gt;&lt;a href=&quot;#综述&quot; class=&quot;headerlink&quot; title=&quot;综述&quot;&gt;&lt;/a&gt;综述&lt;/h2&gt;&lt;p&gt;总结从笔记记录到「可发布」笔记产生的工作流程，以统合知识管理不同阶段的目标：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;记录阶段：&lt;ul&gt;
&lt;li&gt;历史可追溯，踩坑可复现&lt;/li&gt;
&lt;li&gt;时间顺序——对修改、增加开放&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;发布阶段：&lt;ul&gt;
&lt;li&gt;逻辑顺序——简洁易读&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Digital Life" scheme="http://ofey404.github.io/categories/Digital-Life/"/>
    
    
      <category term="lan-chinese" scheme="http://ofey404.github.io/tags/lan-chinese/"/>
    
      <category term="productivity" scheme="http://ofey404.github.io/tags/productivity/"/>
    
      <category term="handbook" scheme="http://ofey404.github.io/tags/handbook/"/>
    
      <category term="writing" scheme="http://ofey404.github.io/tags/writing/"/>
    
  </entry>
  
  <entry>
    <title>[LOG] 用 docker 建立 julia 环境的手册</title>
    <link href="http://ofey404.github.io/2019/07/28/log-julia-environment-with-docker/"/>
    <id>http://ofey404.github.io/2019/07/28/log-julia-environment-with-docker/</id>
    <published>2019-07-28T04:59:28.000Z</published>
    <updated>2019-07-28T05:07:34.630Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>日常手册/指北 分享</p></blockquote><h2 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h2><blockquote><p>简洁描述可以以及如何解决当前问题</p></blockquote><p>julia 是先进的数据处理语言。要运行 julia 代码，就需要一个环境。</p><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote><p>问题产生场景和激发隐藏任务事件/链接/…</p></blockquote><p>实验室需要我跑一个代码，是用 julia 写的。</p><p><a href="https://github.com/jarvist/PolaronMobility.jl" target="_blank" rel="noopener">jarvist/PolaronMobility.jl</a></p><h3 id="隐藏任务：如何在终端里炫酷地展示系统信息"><a href="#隐藏任务：如何在终端里炫酷地展示系统信息" class="headerlink" title="隐藏任务：如何在终端里炫酷地展示系统信息"></a>隐藏任务：如何在终端里炫酷地展示系统信息</h3><p>mac 环境。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">brew install screenfetch</span><br><span class="line"></span><br><span class="line">screenfetch</span><br><span class="line"></span><br><span class="line">                 -/+:.          ofey@OfeydeMacBook-Pro</span><br><span class="line">                :++++.          OS: 64bit Mac OS X 10.14.5 18F203</span><br><span class="line">               /+++/.           Kernel: x86_64 Darwin 18.6.0</span><br><span class="line">       .:-::- .+/:-``.::-       Uptime: 1d 10h 26m</span><br><span class="line">    .:/++++++/::::/++++++/:`    Packages: 56</span><br><span class="line">  .:///////////////////////:`   Shell: zsh 5.3</span><br><span class="line">  ////////////////////////`     Resolution: 2880x1800</span><br><span class="line"> -+++++++++++++++++++++++`      DE: Aqua</span><br><span class="line"> /++++++++++++++++++++++/       WM: Quartz Compositor</span><br><span class="line"> /sssssssssssssssssssssss.      WM Theme: Blue</span><br><span class="line"> :ssssssssssssssssssssssss-     Font: RobotoMonoForPowerline-Regular 12</span><br><span class="line">  osssssssssssssssssssssssso/`  CPU: Intel Core i7-8850H @ 2.60GHz</span><br><span class="line">  `syyyyyyyyyyyyyyyyyyyyyyyy+`  GPU: Intel UHD Graphics 630 / Radeon Pro 560X</span><br><span class="line">   `ossssssssssssssssssssss/    RAM: 8435MiB / 16384MiB</span><br><span class="line">     :ooooooooooooooooooo+.</span><br><span class="line">      `:+oo+/:-..-:/+o+/-</span><br></pre></td></tr></table></figure><p>ref：<a href="http://macappstore.org/screenfetch/" target="_blank" rel="noopener">Install screenfetch on Mac OSX</a></p><h3 id="隐藏任务：如何访问-docker-容器中的-jupyter-notebook"><a href="#隐藏任务：如何访问-docker-容器中的-jupyter-notebook" class="headerlink" title="隐藏任务：如何访问 docker 容器中的 jupyter notebook"></a>隐藏任务：如何访问 docker 容器中的 jupyter notebook</h3><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><blockquote><p>解决办法适用的环境/版本</p></blockquote><ul><li>Docker version 18.09.2, build 6247962</li><li>OS: 64bit Mac OS X 10.14.5 18F203</li><li>vscode: 1.36.1 2213894ea0415ee8c85c5eea0d0ff81ecc191529 x64</li></ul><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote><p>详细描述问题的范畴/条件/上下文/…</p></blockquote><p>如何迅速在 Mac OS X 上安装好可用好用的 julia 环境。</p><p>解决方案的几点要求</p><ul><li>简单，不容易掉坑；</li><li>最好可以用熟悉的开发环境；</li><li>最好跨平台，经验可以复用；</li></ul><p>所以选择全平台，容器化的应用 docker。控制 docker 的客户端使用 vscode 的插件，容器内开发使用 vscode 的远程模式。</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><blockquote><p>逐步说明用什么工具, 在哪儿, 进行什么操作, 如何检验, 应该获得什么输出 …</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull julia  <span class="comment"># minimal version, official, without jupyter notebook support.</span></span><br></pre></td></tr></table></figure><h3 id="run-container-in-a-disposable-mode"><a href="#run-container-in-a-disposable-mode" class="headerlink" title="run container in a disposable mode"></a>run container in a disposable mode</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Starting the Julia REPL is as easy as the following:</span></span><br><span class="line">docker run -it --rm julia</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run Julia script from your local directory inside container</span></span><br><span class="line">docker run -it --rm -v <span class="string">"<span class="variable">$PWD</span>"</span>:/usr/myapp -w /usr/myapp julia julia script.jl arg1 arg2</span><br></pre></td></tr></table></figure><h3 id="attach-with-vscode"><a href="#attach-with-vscode" class="headerlink" title="attach with vscode"></a>attach with vscode</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v <span class="string">"<span class="variable">$PWD</span>"</span>:/root/ julia</span><br></pre></td></tr></table></figure><p>Then attach container with vscode-remote.</p><p>tutorial: <a href="https://code.visualstudio.com/docs/remote/containers" target="_blank" rel="noopener">Developing inside a Container</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>再次说明经验应用要注意的, 容易出问题的点, 以及有助记忆的作弊条…</p></blockquote><p>直接用 docker 拉取镜像，运行就可以了。</p><h2 id="refer"><a href="#refer" class="headerlink" title="refer"></a>refer</h2><blockquote><p>过程中参考过的重要文章/图书/模块/代码/…</p></blockquote><ul><li>永远的: <a href="https://gitlab.com/101camp/2py/tasks/wikis/HandBooks/Hb4Ask" target="_blank" rel="noopener">如何提问</a></li><li><a href="https://lectures.quantecon.org/jl/getting_started.html" target="_blank" rel="noopener">Setting up Your Julia Environment¶</a></li><li><a href="https://medium.com/fundbox-engineering/overview-d3759e83969c" target="_blank" rel="noopener">Running local Jupyter (and JupyterLab) env with Docker</a></li><li><a href="https://hub.docker.com/_/julia" target="_blank" rel="noopener">julia Docker Official Images</a></li></ul><h2 id="logging"><a href="#logging" class="headerlink" title="logging:"></a>logging:</h2><blockquote><p>用倒序日期排列来从旧到新记要关键变化</p></blockquote><ul><li>190728 ofey init</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;日常手册/指北 分享&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;综述&quot;&gt;&lt;a href=&quot;#综述&quot; class=&quot;headerlink&quot; title=&quot;综述&quot;&gt;&lt;/a&gt;综述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;简洁描述可以以及如何解决当前问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;julia 是先进的数据处理语言。要运行 julia 代码，就需要一个环境。&lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://ofey404.github.io/categories/Programming/"/>
    
      <category term="data science" scheme="http://ofey404.github.io/categories/Programming/data-science/"/>
    
    
      <category term="lan-chinese" scheme="http://ofey404.github.io/tags/lan-chinese/"/>
    
      <category term="handbook" scheme="http://ofey404.github.io/tags/handbook/"/>
    
      <category term="julia" scheme="http://ofey404.github.io/tags/julia/"/>
    
      <category term="docker" scheme="http://ofey404.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>用 miniflux 自建 RSS 服务的指南</title>
    <link href="http://ofey404.github.io/2019/07/18/miniflux-rss-handbook/"/>
    <id>http://ofey404.github.io/2019/07/18/miniflux-rss-handbook/</id>
    <published>2019-07-18T05:54:19.000Z</published>
    <updated>2019-07-18T05:56:23.140Z</updated>
    
    <content type="html"><![CDATA[<p>在建了 RSS Hub 之后，就需要一个 RSS 服务来同步手机端和 PC 端的阅读进度、标星、缓存文章了。</p><p>付费 RSS 服务一个月几美元，一个 VPS 最便宜一个月也是几美元。自己建 RSS 自由度高得多了。所以自己建一个。</p><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote><p>问题产生场景和激发隐藏任务事件/链接/…</p></blockquote><p>想要同步手机端和 PC 端的阅读进度。</p><p>花了二十分钟自己建了 RSS 订阅源，所以不妨再建一个阅读服务吧（逃）。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><blockquote><p>解决办法适用的环境/版本</p></blockquote><p>主机 Ubuntu 18.04，docker 是文章写作时的最新版本。</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><blockquote><p>逐步说明用什么工具, 在哪儿, 进行什么操作, 如何检验, 应该获得什么输出 …</p></blockquote><p>使用 docker-compose 部署。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在家目录下：</span></span><br><span class="line">mkdir miniflux</span><br><span class="line"><span class="built_in">cd</span> miniflux</span><br><span class="line">vi docker-compose.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># copy modified docker-compose.yml inside</span></span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>docker-compose.yml 配置文件内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">'3'</span></span><br><span class="line">services:</span><br><span class="line">  miniflux:</span><br><span class="line">    image: miniflux/miniflux:2.0.16</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">"80:8080"</span></span><br><span class="line">    depends_on:</span><br><span class="line">      - db</span><br><span class="line">    environment:</span><br><span class="line">      - DATABASE_URL=postgres://miniflux:secret@db/miniflux?sslmode=<span class="built_in">disable</span></span><br><span class="line">      - RUN_MIGRATIONS=1</span><br><span class="line">      - POLLING_FREQUENCY=60</span><br><span class="line">      - CREATE_ADMIN=1</span><br><span class="line">      - ADMIN_USERNAME=admin</span><br><span class="line">      - ADMIN_PASSWORD=test123</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">  db:</span><br><span class="line">    image: postgres:10.1</span><br><span class="line">    environment:</span><br><span class="line">      - POSTGRES_USER=miniflux</span><br><span class="line">      - POSTGRES_PASSWORD=secret</span><br><span class="line">    volumes:</span><br><span class="line">      - miniflux-db:/var/lib/postgresql/data</span><br><span class="line">volumes:</span><br><span class="line">  miniflux-db:</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>再次说明经验应用要注意的, 容易出问题的点, 以及有助记忆的作弊条…</p></blockquote><p><strong>实用技术尽量选能实现功能的前提下尽可能简单的，尤其是这种需求明确、配好之后不用更新的场景。不要盲目崇拜难度和复杂度。</strong></p><p>刚开始功能求大求全，选用了 Tinytiny RSS，结果 fever api 模拟输出莫名其妙出了故障，用的是别人的 docker 镜像，修起来又可以预见巨费时间。</p><p>之前查资料的时候，有人选用 miniflux 的理由就是 ttrss 快一年没更新了。查了 ttrss 社区中的讨论，说是插件的问题，要自己 hack…所以果断弃用 ttrss。</p><p>miniflux 秉承极简风格，甚至没有插件，作者说插件很容易会没人维护。善哉此言。</p><h2 id="refer"><a href="#refer" class="headerlink" title="refer"></a>refer</h2><blockquote><p>过程中参考过的重要文章/图书/模块/代码/…</p></blockquote><ul><li><a href="https://zoomyale.com/2018/miniflux_rss" target="_blank" rel="noopener">用 Miniflux 自建轻便好用的 RSS 服务</a></li><li><a href="https://felicoz.com/en/2017/04/miniflux-reeder3-rss-reader/" target="_blank" rel="noopener">Miniflux + Reeder 3 = IOS RSS 阅读神器</a></li><li>永远的: <a href="https://gitlab.com/101camp/2py/tasks/wikis/HandBooks/Hb4Ask" target="_blank" rel="noopener">如何提问</a></li></ul><h2 id="logging"><a href="#logging" class="headerlink" title="logging:"></a>logging:</h2><blockquote><p>用倒序日期排列来从旧到新记要关键变化</p></blockquote><ul><li>190718 ofey init</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在建了 RSS Hub 之后，就需要一个 RSS 服务来同步手机端和 PC 端的阅读进度、标星、缓存文章了。&lt;/p&gt;
&lt;p&gt;付费 RSS 服务一个月几美元，一个 VPS 最便宜一个月也是几美元。自己建 RSS 自由度高得多了。所以自己建一个。&lt;/p&gt;
    
    </summary>
    
      <category term="Digital Life" scheme="http://ofey404.github.io/categories/Digital-Life/"/>
    
    
      <category term="lan-chinese" scheme="http://ofey404.github.io/tags/lan-chinese/"/>
    
      <category term="reading" scheme="http://ofey404.github.io/tags/reading/"/>
    
      <category term="rss" scheme="http://ofey404.github.io/tags/rss/"/>
    
      <category term="productivity" scheme="http://ofey404.github.io/tags/productivity/"/>
    
      <category term="handbook" scheme="http://ofey404.github.io/tags/handbook/"/>
    
  </entry>
  
  <entry>
    <title>用 RSS Hub 自建 RSS 订阅</title>
    <link href="http://ofey404.github.io/2019/07/18/my-rss-hub/"/>
    <id>http://ofey404.github.io/2019/07/18/my-rss-hub/</id>
    <published>2019-07-18T02:18:36.000Z</published>
    <updated>2019-08-05T02:42:46.518Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>日常手册/指北 分享</p></blockquote><h2 id="综述和背景"><a href="#综述和背景" class="headerlink" title="综述和背景"></a>综述和背景</h2><p>RSS Hub 是一个活跃开发的开源项目，「万物皆可 RSS」的口号表明了它是一个能把各种乱七八糟的东西制作成 RSS feed，包括 twitter、微信公众号……的项目。</p><p>正好最近入手了 Reeder 4，同时又有通过 RSS 订阅 Issue 的需求，所以就复活自己在 DigitalOcean 上吃灰的云主机，来建他一个。</p><a id="more"></a><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><blockquote><p>解决办法适用的环境/版本</p></blockquote><ul><li>RSS Hub <a href="https://hub.docker.com/r/diygod/rsshub" target="_blank" rel="noopener">Docker 版本</a></li><li>DigitalOcean 云主机一只</li></ul><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><blockquote><p>逐步说明用什么工具, 在哪儿, 进行什么操作, 如何检验, 应该获得什么输出 …</p></blockquote><h3 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h3><p>使用 Docker 的方式来部署 RSS Hub，这是<a href="https://docs.rsshub.app/install/#%E5%AE%89%E8%A3%85-2" target="_blank" rel="noopener">官方手册</a>上的推荐方案之一。</p><p>主要还是 Docker 省心。</p><p>DO 竟然自带<a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-18-04" target="_blank" rel="noopener">安装 Docker 的说明</a>。省心程度+1</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line">sudo add-apt-repository <span class="string">"deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable"</span></span><br><span class="line"></span><br><span class="line">sudo apt update</span><br><span class="line">apt-cache policy docker-ce</span><br><span class="line">sudo apt install docker-ce</span><br><span class="line"></span><br><span class="line">sudo systemctl status docker</span><br></pre></td></tr></table></figure><p>DO 的该说明竟然连 Docker 命令的使用、Use docker without sudo 都讲到了，简直是入门手册……配套服务真的好。</p><h3 id="使用-Docker-部署"><a href="#使用-Docker-部署" class="headerlink" title="使用 Docker 部署"></a>使用 Docker 部署</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull diygod/rsshub</span><br><span class="line">docker run -d --name rsshub -p 1200:1200 diygod/rsshub</span><br></pre></td></tr></table></figure><p>访问 (ip of VPS):1200 可以看到一个光秃秃的界面。</p><h3 id="添加订阅源"><a href="#添加订阅源" class="headerlink" title="添加订阅源"></a>添加订阅源</h3><p><a href="https://docs.rsshub.app" target="_blank" rel="noopener">官方手册</a>的「路由」页面放了许多写好的路由规则，直接按照规则订阅就完事了。</p><p>自己写规则贡献规则什么的以后再说吧……说着就冲动消费入了个 Reeder 4 for iOS。</p><p>对某个源生成订阅的方法：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://(your RSS Hub VPS ip):1200/路由</span><br><span class="line"><span class="comment"># eg:</span></span><br><span class="line">http://(your RSS Hub VPS ip):1200/nytimes/dual  <span class="comment"># 纽约时报</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>再次说明经验应用要注意的, 容易出问题的点, 以及有助记忆的作弊条…</p></blockquote><p>真的很简单，没有什么出问题的点，一个坑都没踩到，二十分钟弄完了。</p><p>主要还是要找到最官方的手册，比如 DO 自己部署 Docker 的说明，和 RSS Hub 的官方手册，这样可以最大程度地避免踩到特殊环境的坑。</p><p>订阅生成法：<code>http://(your RSS Hub VPS ip):1200/路由</code></p><p>路由在<a href="https://docs.rsshub.app" target="_blank" rel="noopener">官方手册</a></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><blockquote><p>过程中参考过的重要文章/图书/模块/代码/…</p></blockquote><ul><li><a href="http://diygod.me/ohmyrss/" target="_blank" rel="noopener">我有特别的 RSS 技巧-DIYGOD</a></li><li><a href="https://sspai.com/post/41302" target="_blank" rel="noopener">如何搭建属于自己的 RSS 服务，高效精准获取信息-少数派</a></li><li><a href="https://docs.rsshub.app" target="_blank" rel="noopener">RSS Hub 官方手册</a></li><li><a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-18-04" target="_blank" rel="noopener">DO 对安装 docker 的说明</a></li><li>永远的: <a href="https://gitlab.com/101camp/2py/tasks/wikis/HandBooks/Hb4Ask" target="_blank" rel="noopener">如何提问</a></li></ul><h2 id="logging"><a href="#logging" class="headerlink" title="logging"></a>logging</h2><ul><li>190718 ofey init</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;日常手册/指北 分享&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;综述和背景&quot;&gt;&lt;a href=&quot;#综述和背景&quot; class=&quot;headerlink&quot; title=&quot;综述和背景&quot;&gt;&lt;/a&gt;综述和背景&lt;/h2&gt;&lt;p&gt;RSS Hub 是一个活跃开发的开源项目，「万物皆可 RSS」的口号表明了它是一个能把各种乱七八糟的东西制作成 RSS feed，包括 twitter、微信公众号……的项目。&lt;/p&gt;
&lt;p&gt;正好最近入手了 Reeder 4，同时又有通过 RSS 订阅 Issue 的需求，所以就复活自己在 DigitalOcean 上吃灰的云主机，来建他一个。&lt;/p&gt;
    
    </summary>
    
      <category term="Digital Life" scheme="http://ofey404.github.io/categories/Digital-Life/"/>
    
    
      <category term="lan-chinese" scheme="http://ofey404.github.io/tags/lan-chinese/"/>
    
      <category term="reading" scheme="http://ofey404.github.io/tags/reading/"/>
    
      <category term="rss" scheme="http://ofey404.github.io/tags/rss/"/>
    
      <category term="productivity" scheme="http://ofey404.github.io/tags/productivity/"/>
    
      <category term="handbook" scheme="http://ofey404.github.io/tags/handbook/"/>
    
  </entry>
  
  <entry>
    <title>COP CRAFT 动画版——超越原作</title>
    <link href="http://ofey404.github.io/2019/07/17/cop-craft-anime/"/>
    <id>http://ofey404.github.io/2019/07/17/cop-craft-anime/</id>
    <published>2019-07-17T12:31:56.000Z</published>
    <updated>2019-07-17T12:36:51.808Z</updated>
    
    <content type="html"><![CDATA[<p>动画兼有满满的「贺东味」——不做花瓶遇事不会嘤嘤嘤的硬派女主、动作片式的场景调度与氛围把握、军宅对细节的考究……和目前看来相当不错的制作素质（与经费）。</p><a id="more"></a><p>看了一点 COP CRAFT 的小说，不得不说动画改得好。例如：</p><ol><li>将的场死去同事的年龄改大。留下妻子和未成年儿女，接到消息孩子们还不知道发生了什么。这比小说「订婚的未婚妻」冲击力大很多。</li><li>接到缇拉娜之后「服务读者」桥段的删减，乃至对异世界风貌叙述的整体压缩·，把重点完全放到犯罪之城的塑造和刑警-骑士搭档的磨合上。不破坏前两集灰暗且相当写实的警匪片气氛，前军人大叔警官和异世界（中世纪）人外萝莉剑士的关系培养的描写可以放到第一个事件结束，正好78福利回的时候。异世界的描述也可能是移了位置，之后再补完。</li></ol><p>序幕里桂警官和同事关于猫的对话改了，这是很有趣的一点。原本是没有性暗示的，是「接近会让彼此受伤」这种怨侣式笑话，动画中改成了「蓝眼睛的美女，每晚都在我背上留下抓痕」。</p><p>如果是因什么规定自主规制的话，应该是不会往成人的方向改的。我猜这可能是贺东的意思——毕竟他对自己的作品改的剧本一向非常上心，即使在 FMP 4 那种经费紧张的情况下也自己介入，保证了质量。</p><p>这点修改和之前增大死去同事的年龄达到了相似的效果，营造出了一种和轻松的普通动漫不同的，沉重的「 B 级警匪片」的质感。</p><p>要我评价的话，动漫的水平（单看前两集），是超越小说的。小说是贺东在处女作 FMP 之后的第二个作品，既有人物关系等细节上和前作的相似，也有一些「服务读者」的风格转变，在他的创作史上应该算比较青涩。动画版有机会补完这些遗憾很不错。</p><p>剧本有小说做底，贺东坐镇，出不了太大问题。只要制作不崩，基本可以放心食用。</p><p>话说在某个地方看到了第一版的非村田莲尔版插画，一言难尽……动画在人设观感方面的亮眼，真得感谢村田老师的人设。村田老师牛逼！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;动画兼有满满的「贺东味」——不做花瓶遇事不会嘤嘤嘤的硬派女主、动作片式的场景调度与氛围把握、军宅对细节的考究……和目前看来相当不错的制作素质（与经费）。&lt;/p&gt;
    
    </summary>
    
      <category term="ACG" scheme="http://ofey404.github.io/categories/ACG/"/>
    
      <category term="anime review" scheme="http://ofey404.github.io/categories/ACG/anime-review/"/>
    
    
      <category term="lan-chinese" scheme="http://ofey404.github.io/tags/lan-chinese/"/>
    
      <category term="cop craft" scheme="http://ofey404.github.io/tags/cop-craft/"/>
    
  </entry>
  
  <entry>
    <title>Issue 管理入门指北</title>
    <link href="http://ofey404.github.io/2019/07/16/introduction-to-issue-management/"/>
    <id>http://ofey404.github.io/2019/07/16/introduction-to-issue-management/</id>
    <published>2019-07-16T07:34:36.000Z</published>
    <updated>2019-07-18T02:25:23.944Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Consistent use of an issue or bug tracking system is considered one of the “hallmarks of a good software team”. – wikipedia</p></blockquote><p>作为社会化软件开发的必备技能，本文分享一些 Issue 管理的常识。</p><a id="more"></a><p>以下皆为本人阅读积累和逻辑分析，结论是保持开放的。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote><p>问题产生场景和激发隐藏任务事件/链接/…</p></blockquote><p>本文来自微信群中和大妈的一段对话：</p><blockquote><p>【大妈】：<br>在俺的直觉中:<br>0: Issue 根据性质/内容/目标不同, 有不同生命周期<br>1: 为了提醒大家和自己,在标题中注明是最好的<br>比如: 2d[FAQ] 如何下载git?<br>2: 关闭, 并不代表死亡..只是为了保证 Issue 首页能看到所有活跃提案, 甚至于, 先关闭, 自己完善到一定程度, 再打开公示也可以</p></blockquote><p>camp2py 学员们的信息交流、问题讨论，主要使用 <a href="https://gitlab.com/101camp/2py/tasks/issues" target="_blank" rel="noopener">task 仓库的 Issue 页面</a>。只要参与课程讨论，一定会使用 Issue。可预见将来参与正规的软件开发也会如此，Issue 的管理是合作软件开发中重要的一环，更是开源软件工作流程中不可或缺的一环。</p><p>既然要学习 Issue 的管理，那么就要回答以下问题：</p><ol><li>Issue 有什么用？为什么要进行 Issue 管理？</li><li>有哪些种类的 Issue？各种 Issue 一般又有什么样的模版？</li><li>何时应该创建一个 Issue？关闭一个 Issue 呢？哪些信息又不应该放进 Issue？</li><li>如何才能持续收到 Issue 页面的更新？</li><li>（进阶，本次不准备回答）对开源软件，作为用户/普通贡献者/仓库管理者分别有什么样的 Issue 管理原则和注意事项？</li></ol><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><blockquote><p>解决办法适用的环境/版本</p></blockquote><p>github、gitlab 都有内建的 Issue 功能。但是 Issue Track System 的范畴比这些例子要广一些，是一类软件系统的统称。</p><p>Issue Track System 在某些方面类似 Bug Tracker，wikipedia 上有个 <a href="https://en.wikipedia.org/wiki/Comparison_of_issue-tracking_systems" target="_blank" rel="noopener">issue tracking system 的比较</a>。</p><h2 id="问题和回答"><a href="#问题和回答" class="headerlink" title="问题和回答"></a>问题和回答</h2><blockquote><p>详细描述问题的范畴/条件/上下文/…<br>【回答的可操作性】逐步说明用什么工具, 在哪儿, 进行什么操作, 如何检验, 应该获得什么输出 …</p></blockquote><h3 id="Issue-有什么用？为什么要进行-Issue-管理？"><a href="#Issue-有什么用？为什么要进行-Issue-管理？" class="headerlink" title="Issue 有什么用？为什么要进行 Issue 管理？"></a>Issue 有什么用？为什么要进行 Issue 管理？</h3><p>Issue 是团队内/团队和外部用户之间交流的一个渠道，直接和某个代码库相关联。同时采取「公告板」形式，和不分主题的「聊天记录」形式相对，一个帖子的讨论历史集中，便于查找。</p><p>因此 Issue 的适用条件：</p><ul><li>以某个代码库为中心的讨论；</li><li>文本量较大，更接近电邮、文章而非聊天的讨论；</li><li>可能需要持续很长时间（数天、数月）的讨论；</li><li>同一主题下回复历史中的信息非常重要的讨论；</li><li>记录需要长期保存以备查找的讨论。</li></ul><p>Issue 是「信息流模式」——和以逻辑联系的「wiki模式」或者说「书籍模式」相对。不断有新的 Issue Open，生命周期结束的 Issue Close，Issue 的页面的经典阅读模式也是从上到下的流模式，外加检索和筛选功能。</p><p>因此：</p><ul><li>每种 Issue 都必须有其生命周期，必须在某个时刻关闭，因为首页的空间资源和团队的注意力资源都是有限的。</li><li>同时 Issue 作为一个「流模式」讨论版，除了记录关闭后的归档之外，不应该承担任何知识库的功能。<ul><li>任何在关闭后有用的信息都应该整理归档到其他地方。例如：</li><li>「常见问题」在关闭后应该归档到项目 wiki 专门的 FAQ 收集页面（虽然现在还不存在）；</li><li>「工具指南」应该归档到团队的知识库，在蟒营也是项目 wiki 的知识库页面。</li></ul></li></ul><p>重申一遍原则：</p><ol><li>Issue 不承担知识库的功能，任何完善到可用的 Issue 都应该及时整理归档，保持 Issue 页面整洁。</li><li>（几乎）任何 Issue 都需要在某个时刻关闭。</li></ol><h3 id="有哪些种类的-Issue？创建-Issue-又有什么样的要求和模版？"><a href="#有哪些种类的-Issue？创建-Issue-又有什么样的要求和模版？" class="headerlink" title="有哪些种类的 Issue？创建 Issue 又有什么样的要求和模版？"></a>有哪些种类的 Issue？创建 Issue 又有什么样的要求和模版？</h3><p>普适的我没精力去整理。本课程的学习中出现了如下几种 Issue，所有模版在 Issue 页面点击 <a href="https://gitlab.com/101camp/2py/tasks/issues/new?issue%5Bassignee_id%5D=&issue%5Bmilestone_id%5D=" target="_blank" rel="noopener">New Issue</a> 按钮可以看到。</p><p>对一个项目，常见的 Issue 最好要有模版，可以复用。</p><ul><li>Ask 模版：日常提问模板。</li><li>Report 模版：学员周任务汇报模版，标题格式——[任务周] &lt;学员ID&gt; (心情断言)</li><li>Handbook 模版，tag [FAQ]：日常手册/指北 分享。</li></ul><p><strong>[FAQ] tag 滥用的问题</strong></p><p>目前大家似乎在滥用 [FAQ] tag，普通的提问并不值得成为所谓的”Frequent Asked Question”。一是不一定 Frequent，二是普通提问的可阅读性、知识密度往往很难有「手册」级别的价值。</p><p>信息爆炸成一团噪音，信息则无价值。[FAQ] 这个 tag 应该是对那些作者努力收集了所有可用信息，改善了文章的可读性、泛用性，同时又真正能帮到许多人的文章的标志。换言之标[FAQ]应该是作者对内容质量的一个承诺。</p><h3 id="何时应该创建一个-Issue？"><a href="#何时应该创建一个-Issue？" class="headerlink" title="何时应该创建一个 Issue？"></a>何时应该创建一个 Issue？</h3><p>模版的类型基本可以回答大部分「何时创建」的问题了。「信息过载」的度请各位自行判断。</p><p>同时对模版覆盖不了的情况，再次重申 Issue 的适用条件：</p><ul><li>以某个代码库为中心的讨论；</li><li>文本量较大，更接近电邮、文章而非聊天的讨论；</li><li>可能需要持续很长时间（数天、数月）的讨论；</li><li>同一主题下回复历史中的信息非常重要的讨论；</li><li>记录需要长期保存以备查找的讨论。</li></ul><p>有时有可能是模版还没 cover 到，所以各位可以适时地自己创造模版，然后发布在社区中。</p><h3 id="何时关闭一个-Issue-？"><a href="#何时关闭一个-Issue-？" class="headerlink" title="何时关闭一个 Issue ？"></a>何时关闭一个 Issue ？</h3><p>Issue 一定需要关闭。「关闭」意味着 Issue 不会出现在 Open 栏，相当于被暂时归档。</p><p>关闭的 Issue 仍然可以被查找，只是相当于不出现在首页上，不占用大家宝贵的注意力资源。同时关闭了的 Issue 也可以重新被打开。</p><p>各种类型 Issue 的推定关闭时机</p><ul><li>提问 Issue——问题解答后关闭。视热度选择是否进一步处理，成为一篇文章。</li><li>FAQ Issue——文章完善后关闭，归档到对应的知识库。</li><li>特殊功能型 Issue——完成功能立刻关闭。例如“Hello World” Issue。</li><li>需要他人确认、合作的Issue——完成功能后关闭。例如周任务报告，可能需要老师确认。</li></ul><h3 id="哪些信息又不应该放进-Issue？"><a href="#哪些信息又不应该放进-Issue？" class="headerlink" title="哪些信息又不应该放进 Issue？"></a>哪些信息又不应该放进 Issue？</h3><p>永远的: <a href="https://gitlab.com/101camp/2py/tasks/wikis/HandBooks/Hb4Ask" target="_blank" rel="noopener">如何提问</a></p><h3 id="如何才能持续收到-Issue-页面的更新？"><a href="#如何才能持续收到-Issue-页面的更新？" class="headerlink" title="如何才能持续收到 Issue 页面的更新？"></a>如何才能持续收到 Issue 页面的更新？</h3><p>gitlab 的 Issue 页面有 <a href="https://gitlab.com/101camp/2py/tasks/issues.atom?feed_token=kHJS1J-xZ5reczvJ89eh&state=opened" target="_blank" rel="noopener">RSS feed</a>。</p><p>用 RSS 接收 Issue 更新似乎是业界的普遍实践。如果大家有不了解 RSS 的，可以参考这一篇 <a href="https://sspai.com/post/54658" target="_blank" rel="noopener">中文文章</a>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>再次说明经验应用要注意的, 容易出问题的点, 以及有助记忆的作弊条…</p></blockquote><ol><li>Issue 不承担知识库的功能，任何完善到可用的 Issue 都应该及时整理归档，保持 Issue 页面整洁。</li><li>（几乎）任何 Issue 都需要在某个时刻关闭。</li><li>对 [FAQ] tag 的滥用：<ul><li>[FAQ] 这个 tag 应该是对那些作者努力收集了所有可用信息，改善了文章的可读性、泛用性，同时又真正能帮到许多人的文章的标志。换言之标[FAQ]应该是作者对内容质量的一个承诺。</li></ul></li><li>各种类型 Issue 的推定关闭时机<ul><li>提问 Issue——问题解答后关闭。视热度选择是否进一步处理，成为一篇文章。</li><li>FAQ Issue——文章完善后关闭，归档到对应的知识库。</li><li>特殊功能型 Issue——完成功能立刻关闭。例如“Hello World” Issue。</li><li>需要他人确认、合作的Issue——完成功能后关闭。例如周任务报告，可能需要老师确认。</li></ul></li></ol><h2 id="refer"><a href="#refer" class="headerlink" title="refer"></a>refer</h2><blockquote><p>过程中参考过的重要文章/图书/模块/代码/…</p></blockquote><ul><li><a href="https://en.wikipedia.org/wiki/Issue_tracking_system#cite_note-2" target="_blank" rel="noopener">Issue tracking system</a></li><li><a href="https://www.projectmanager.com/training/managing-project-issues" target="_blank" rel="noopener">7 Steps for Managing Project Issues</a></li><li>永远的: <a href="https://gitlab.com/101camp/2py/tasks/wikis/HandBooks/Hb4Ask" target="_blank" rel="noopener">如何提问</a></li></ul><h2 id="logging"><a href="#logging" class="headerlink" title="logging:"></a>logging:</h2><blockquote><p>用倒序日期排列来从旧到新记要关键变化</p><ul><li>190716 init</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Consistent use of an issue or bug tracking system is considered one of the “hallmarks of a good software team”. – wikipedia&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作为社会化软件开发的必备技能，本文分享一些 Issue 管理的常识。&lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://ofey404.github.io/categories/Programming/"/>
    
      <category term="Social Development" scheme="http://ofey404.github.io/categories/Programming/Social-Development/"/>
    
    
      <category term="lan-chinese" scheme="http://ofey404.github.io/tags/lan-chinese/"/>
    
      <category term="handbook" scheme="http://ofey404.github.io/tags/handbook/"/>
    
      <category term="gitlab" scheme="http://ofey404.github.io/tags/gitlab/"/>
    
      <category term="camp2py" scheme="http://ofey404.github.io/tags/camp2py/"/>
    
  </entry>
  
  <entry>
    <title>Mac Custom</title>
    <link href="http://ofey404.github.io/2019/07/15/mac-custom/"/>
    <id>http://ofey404.github.io/2019/07/15/mac-custom/</id>
    <published>2019-07-15T08:09:25.000Z</published>
    <updated>2019-07-18T02:25:28.351Z</updated>
    
    <content type="html"><![CDATA[<p>Mac 电脑整体的设计思路和机甲片里的「特装机」一样——不惜工本，提升某几个方面的性能，不易整备，零件/技能不易通用。</p><a id="more"></a><p>但 Mac 好的是在特化的同时保持了界面友好性，学习成本相当低，比起难以驾驭的「古铁巨人」更像界面友好的「初代高达」——并不需要太多特殊技术也能发挥相当一部分性能，单纯只是造价高昂、不易维护而已。</p><p>特机给一般操纵士来开，当然会有诸多怨言——难以后勤补给、和队友的兼容性差、某些方面因为特殊设计而产生缺陷。同时对特机的特化性能优势，如果抱着一般操纵士的思维，也难以有效利用。</p><p>当然也有「相良宗介」这种量产大神……但是人家嘴上百般嫌弃特机「强弩」，最后还是乖乖一路用「强弩」和「利维坦」打到了破关:) </p><p>特机是设计出来在特殊情境下发挥非凡价值的机械，其能力的发挥需要配得上它的特殊操纵士和合适的场景。一般操纵士开特机会有反效果，是因为他们承受了特机带来的问题，却没能发挥出特机的价值。</p><blockquote><p>Macintosh、出る！</p></blockquote><p>另外HHKB是真的需要一些特殊技巧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mac 电脑整体的设计思路和机甲片里的「特装机」一样——不惜工本，提升某几个方面的性能，不易整备，零件/技能不易通用。&lt;/p&gt;
    
    </summary>
    
      <category term="Hardware" scheme="http://ofey404.github.io/categories/Hardware/"/>
    
      <category term="Apple" scheme="http://ofey404.github.io/categories/Hardware/Apple/"/>
    
    
      <category term="lan-chinese" scheme="http://ofey404.github.io/tags/lan-chinese/"/>
    
      <category term="productivity" scheme="http://ofey404.github.io/tags/productivity/"/>
    
      <category term="robot" scheme="http://ofey404.github.io/tags/robot/"/>
    
      <category term="design" scheme="http://ofey404.github.io/tags/design/"/>
    
  </entry>
  
  <entry>
    <title>Web Scraping Introduction with Scrapy</title>
    <link href="http://ofey404.github.io/2019/07/12/web-scraping-intro-with-scrapy/"/>
    <id>http://ofey404.github.io/2019/07/12/web-scraping-intro-with-scrapy/</id>
    <published>2019-07-12T15:27:41.000Z</published>
    <updated>2019-07-12T15:37:52.964Z</updated>
    
    <content type="html"><![CDATA[<p>Resources</p><ul><li><a href="https://www.datacamp.com/community/tutorials/making-web-crawlers-scrapy-python" target="_blank" rel="noopener">Making Web Crawlers Using Scrapy for Python</a></li><li><a href="https://docs.scrapy.org/en/latest/intro/overview.html" target="_blank" rel="noopener">docs of Scrapy</a></li><li><a href="https://github.com/geekan/scrapy-examples/tree/master/doubanbook" target="_blank" rel="noopener">geekan/scrapy-examples</a></li></ul><a id="more"></a><h2 id="Create-a-project"><a href="#Create-a-project" class="headerlink" title="Create a project"></a>Create a project</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject &lt;names&gt;</span><br></pre></td></tr></table></figure><h2 id="First-spider"><a href="#First-spider" class="headerlink" title="First spider"></a>First spider</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuotesSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">"quotes"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></span><br><span class="line">        urls = [</span><br><span class="line">            <span class="string">'http://quotes.toscrape.com/page/1/'</span>,</span><br><span class="line">            <span class="string">'http://quotes.toscrape.com/page/2/'</span>,</span><br><span class="line">        ]</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(url=url, callback=self.parse)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        page = response.url.split(<span class="string">"/"</span>)[<span class="number">-2</span>]</span><br><span class="line">        filename = <span class="string">'quotes-%s.html'</span> % page</span><br><span class="line">        <span class="keyword">with</span> open(filename, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(response.body)</span><br><span class="line">        self.log(<span class="string">'Saved file %s'</span> % filename)</span><br></pre></td></tr></table></figure><h2 id="Run-spider"><a href="#Run-spider" class="headerlink" title="Run spider"></a>Run spider</h2><p>Go to top level and run:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl quotes</span><br></pre></td></tr></table></figure><p>Start url can also define explictly in variable <strong>start_urls</strong>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuotesSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">"quotes"</span></span><br><span class="line">    start_urls = [</span><br><span class="line">        <span class="string">'http://quotes.toscrape.com/page/1/'</span>,</span><br><span class="line">        <span class="string">'http://quotes.toscrape.com/page/2/'</span>,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        page = response.url.split(<span class="string">"/"</span>)[<span class="number">-2</span>]</span><br><span class="line">        filename = <span class="string">'quotes-%s.html'</span> % page</span><br><span class="line">        <span class="keyword">with</span> open(filename, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(response.body)</span><br></pre></td></tr></table></figure><h2 id="Extracting-data"><a href="#Extracting-data" class="headerlink" title="Extracting data"></a>Extracting data</h2><p>response.css() method can do this.</p><p>It returns a <strong>Selectlist</strong> object. Can be stripped and queried further.</p><p><strong>Methods</strong></p><ul><li>getall()</li><li>get()</li><li>re(): Extract using regular expressions.</li></ul><p>response.xpath() method is more under-the-hood.</p><p>A example below:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> quote <span class="keyword">in</span> response.css(<span class="string">'div.quote'</span>):</span><br><span class="line">        <span class="keyword">yield</span> &#123;</span><br><span class="line">            <span class="string">'text'</span>: quote.css(<span class="string">'span.text::text'</span>).get(),</span><br><span class="line">            <span class="string">'author'</span>: quote.css(<span class="string">'small.author::text'</span>).get(),</span><br><span class="line">            <span class="string">'tags'</span>: quote.css(<span class="string">'div.tags a.tag::text'</span>).getall(),</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="Store-the-scraped-data"><a href="#Store-the-scraped-data" class="headerlink" title="Store the scraped data"></a>Store the scraped data</h2><blockquote><p>For historic reasons, Scrapy appends to a given file instead of overwriting its contents. If you run this command twice without removing the file before the second time, you’ll end up with a broken JSON file.</p></blockquote><p>The JSON lines format is easy to append.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl quotes -o quotes.json</span><br><span class="line">scrapy crawl quotes -o quotes.jl  <span class="comment"># JSON lines</span></span><br></pre></td></tr></table></figure><p>All formats for <a href="https://docs.scrapy.org/en/latest/topics/feed-exports.html#topics-feed-exports" target="_blank" rel="noopener">Feed exports</a></p><h2 id="Follow-links"><a href="#Follow-links" class="headerlink" title="Follow links"></a>Follow links</h2><p>With attrib[] attribute, or select in the css() method.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; response.css(<span class="string">'li.next a::attr(href)'</span>).get()</span><br><span class="line"><span class="string">'/page/2/'</span></span><br><span class="line">&gt;&gt;&gt; response.css(<span class="string">'li.next a'</span>).attrib[<span class="string">'href'</span>]</span><br><span class="line"><span class="string">'/page/2'</span></span><br></pre></td></tr></table></figure><p><strong>Recursively follow the “Next Page” link</strong></p><p>Build the full absolute URL with urljoin() method.</p><blockquote><p>What you see here is Scrapy’s mechanism of following links: when you yield a Request in a callback method, Scrapy will schedule that request to be sent and register a callback method to be executed when that request finishes.</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def parse(self, response):</span><br><span class="line">    <span class="keyword">for</span> quote <span class="keyword">in</span> response.css(<span class="string">'div.quote'</span>):</span><br><span class="line">        yield &#123;</span><br><span class="line">            <span class="string">'text'</span>: quote.css(<span class="string">'span.text::text'</span>).get(),</span><br><span class="line">            <span class="string">'author'</span>: quote.css(<span class="string">'small.author::text'</span>).get(),</span><br><span class="line">            <span class="string">'tags'</span>: quote.css(<span class="string">'div.tags a.tag::text'</span>).getall(),</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    next_page = response.css(<span class="string">'li.next a::attr(href)'</span>).get()</span><br><span class="line">    <span class="keyword">if</span> next_page is not None:</span><br><span class="line">        next_page = response.urljoin(next_page)</span><br><span class="line">        yield scrapy.Request(next_page, callback=self.parse)</span><br></pre></td></tr></table></figure><p>response.follow support relative URLs directly. Otherwise you can pass a selector directly(with necessary attributes).</p><p>For &lt;a&gt; method there’s a shortcut: follow their href attribute automatically.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> next_page is not None:</span><br><span class="line">    yield response.follow(next_page, callback=self.parse)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pass a selector</span></span><br><span class="line"><span class="keyword">for</span> href <span class="keyword">in</span> response.css(<span class="string">'li.next a::attr(href)'</span>):</span><br><span class="line">    yield response.follow(href, callback=self.parse)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># follow &lt;a&gt; elements directly</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> response.css(<span class="string">'li.next a'</span>):</span><br><span class="line">    yield response.follow(a, callback=self.parse)</span><br></pre></td></tr></table></figure><h2 id="For-Deeper-Scraping"><a href="#For-Deeper-Scraping" class="headerlink" title="For Deeper Scraping"></a>For Deeper Scraping</h2><p>With the callback variable of response.follow() or scrapy.Request() method.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthorSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'author'</span></span><br><span class="line"></span><br><span class="line">    start_urls = [<span class="string">'http://quotes.toscrape.com/'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="comment"># follow links to author pages</span></span><br><span class="line">        <span class="keyword">for</span> href <span class="keyword">in</span> response.css(<span class="string">'.author + a::attr(href)'</span>):</span><br><span class="line">            <span class="keyword">yield</span> response.follow(href, self.parse_author)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># follow pagination links</span></span><br><span class="line">        <span class="keyword">for</span> href <span class="keyword">in</span> response.css(<span class="string">'li.next a::attr(href)'</span>):</span><br><span class="line">            <span class="keyword">yield</span> response.follow(href, self.parse)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_author</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">extract_with_css</span><span class="params">(query)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> response.css(query).get(default=<span class="string">''</span>).strip()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">yield</span> &#123;</span><br><span class="line">            <span class="string">'name'</span>: extract_with_css(<span class="string">'h3.author-title::text'</span>),</span><br><span class="line">            <span class="string">'birthdate'</span>: extract_with_css(<span class="string">'.author-born-date::text'</span>),</span><br><span class="line">            <span class="string">'bio'</span>: extract_with_css(<span class="string">'.author-description::text'</span>),</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>Q: How can I pass some information of current page to the next page to be parsed?</p><h2 id="Arguments"><a href="#Arguments" class="headerlink" title="Arguments"></a>Arguments</h2><p>Spiders can have <a href="https://docs.scrapy.org/en/latest/topics/spiders.html#spiderargs" target="_blank" rel="noopener">arguments</a>.</p><h2 id="Item-Pipeline"><a href="#Item-Pipeline" class="headerlink" title="Item Pipeline"></a>Item Pipeline</h2><blockquote><p>After an item has been scraped by a spider, it is sent to the Item Pipeline which processes it through several components that are executed sequentially.</p></blockquote><p><a href="https://docs.scrapy.org/en/latest/topics/item-pipeline.html#topics-item-pipeline" target="_blank" rel="noopener">more information</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Resources&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.datacamp.com/community/tutorials/making-web-crawlers-scrapy-python&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Making Web Crawlers Using Scrapy for Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.scrapy.org/en/latest/intro/overview.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;docs of Scrapy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/geekan/scrapy-examples/tree/master/doubanbook&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;geekan/scrapy-examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://ofey404.github.io/categories/Programming/"/>
    
      <category term="Web Crawler" scheme="http://ofey404.github.io/categories/Programming/Web-Crawler/"/>
    
    
      <category term="python" scheme="http://ofey404.github.io/tags/python/"/>
    
      <category term="scrapy" scheme="http://ofey404.github.io/tags/scrapy/"/>
    
      <category term="lan-english" scheme="http://ofey404.github.io/tags/lan-english/"/>
    
      <category term="web-scraping" scheme="http://ofey404.github.io/tags/web-scraping/"/>
    
  </entry>
  
</feed>
