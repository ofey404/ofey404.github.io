<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chinglish Small Talk</title>
  
  <subtitle>Tech and Personal Blog of Ofey Chan. Personal articles are in *Archives*.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ofey404.github.io/"/>
  <updated>2020-01-05T00:21:57.274Z</updated>
  <id>http://ofey404.github.io/</id>
  
  <author>
    <name>Ofey Chan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Chapter 1-3 | Note of C++ Primer Plus</title>
    <link href="http://ofey404.github.io/2020/01/05/c-primer-plus-note-c1-3/"/>
    <id>http://ofey404.github.io/2020/01/05/c-primer-plus-note-c1-3/</id>
    <published>2020-01-05T00:19:44.000Z</published>
    <updated>2020-01-05T00:21:57.274Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Chapter 1 Getting start with c++</li><li>Chapter 2 Setting out to c++</li><li>Chapter 3 Dealing with data</li></ul><a id="more"></a><h1 id="Chapter-1-Getting-start-with-c"><a href="#Chapter-1-Getting-start-with-c" class="headerlink" title="Chapter 1 Getting start with c++"></a>Chapter 1 Getting start with c++</h1><p>C Programming philosophy</p><ul><li>procedural programming (emphasize the algorithm than data)</li><li>structured programming (limited branching instructions)</li><li>top-down design(functions as task model)</li></ul><p>The c++ shift to object-oriented programming</p><ul><li>Need: large projects</li><li>fit language to its problem</li><li>bottom-up method (classes -&gt; things program deals)</li><li>reusable code, info hiding, polymorphism, inheritance</li></ul><p>Generic programming: another paradigm</p><ul><li>need: simplify common tasks</li><li>generic means type independent.</li></ul><p>Father of c++: Bjarne Stroustrup.</p><p>Design philosophy of c++ - “winged pig”: real needs is more than theoretical purity.</p><p>A joke of c++ standard:</p><blockquote><p>Fortunately, it was soon realized that 0x could be a hexadeci- mal integer (see Appendix A,“Number Bases”), which meant the committee had until 2015 to finish the work.</p></blockquote><p>Advice of Peter Norvig in <a href="https://norvig.com/21-days.html" target="_blank" rel="noopener">Teach Yourself Programming in Ten Years</a>:</p><blockquote><p>Get involved in a language standardization effort.<br>Have the good sense to get off the language standardization effort as quickly as possible.</p></blockquote><h1 id="Chapter-2-Setting-out-to-c"><a href="#Chapter-2-Setting-out-to-c" class="headerlink" title="Chapter 2 Setting out to c++"></a>Chapter 2 Setting out to c++</h1><p>Skim. Find difference with c, and some special cautions. Put attention on subtitles and appendixs.</p><p><code>using namespace</code> is in chapter 9 memory models and namespace.</p><p><code>endl</code> guarantees the output would be flushed.</p><p>Redefine <code>&lt;&lt;</code> operator can display new data type.</p><p>Anaolgy of class: a data form and how it can be used.</p><p>So there’s a “Chapter Review” part. I should read this first.</p><h1 id="Chapter-3-Dealing-with-data"><a href="#Chapter-3-Dealing-with-data" class="headerlink" title="Chapter 3 Dealing with data"></a>Chapter 3 Dealing with data</h1><p>Read “Chapter Review” part first.</p><ul><li>What is type <code>auto</code>?</li><li>distinction between <code>33L</code> &amp; <code>33</code></li></ul><blockquote><p>Names beginning with two underscore characters or with an underscore character followed by an uppercase letter are reserved for use by the implementation—that is, the compiler and the resources it uses. Names beginning with a single underscore character are reserved for use as global identifiers by the implementation.</p></blockquote><ul><li><code>__variable</code> or <code>_Variable</code>: compiler and resource</li><li><code>_variable</code>: global identifier</li></ul><p>Q: Why data converting order is designed like that?</p><blockquote><ol start="6"><li>Otherwise, one operand is signed and one is unsigned. If the unsigned operand is of higher rank than the signed operand, the latter is converted to the type of the unsigned operand.</li><li>Otherwise, if the signed type can represent all values of the unsigned type, the unsigned operand is converted to the type of the signed type.</li><li>Otherwise, both operands are converted to the unsigned version of the signed type.</li></ol></blockquote><p>I merely take it as ‘scale to the higher rank one’, if all info can be kepted(eg: positive integer and higher ranked unsigned). Else drop to unsigned.(8)</p><p>Other information for further study:</p><ul><li>usage of <code>wchar_t</code> and <code>L&quot;string&quot;</code>.</li><li>universal initialization syntax with parentheses.</li></ul><p>Type casting syntax:</p><ul><li>c type.</li><li><code>typename (value)</code>, this type conversion type is purely c++.</li><li><code>static_cast&lt;typename&gt; (value)</code>, <code>static_cast&lt;&gt;</code> operator.</li></ul><h1 id="logging"><a href="#logging" class="headerlink" title="logging"></a>logging</h1><ul><li>20200105 ofey init</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;Chapter 1 Getting start with c++&lt;/li&gt;
&lt;li&gt;Chapter 2 Setting out to c++&lt;/li&gt;
&lt;li&gt;Chapter 3 Dealing with data&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="c++" scheme="http://ofey404.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>《火焰纹章·风花雪月》超高难度临时记录</title>
    <link href="http://ofey404.github.io/2019/12/07/nonsense-2019-12-Sat-Dec-07-2019-12-27-48-GMT-0800-fire-emblem-3h/"/>
    <id>http://ofey404.github.io/2019/12/07/nonsense-2019-12-Sat-Dec-07-2019-12-27-48-GMT-0800-fire-emblem-3h/</id>
    <published>2019-12-07T04:27:48.000Z</published>
    <updated>2020-01-03T10:41:16.759Z</updated>
    
    <content type="html"><![CDATA[<p>DLC 给了个超高难度。就尝试一下，学期中不打算玩。</p><p>5 小时体验：超高难度好点受苦的……学期中我有时间玩这个，还不如去写写课程 PJ，从挑战性和「不知道能否成功」体验上来讲这两者没啥区别。</p><p>这游戏在超高难度下比较需要规划，在这里记一些备忘。</p><a id="more"></a><h2 id="存档方式"><a href="#存档方式" class="headerlink" title="存档方式"></a>存档方式</h2><p>每章开始存档。存档策略如下图。</p><p>eg：</p><p><code>|1 开始|2 开始|2 关键点一|2 关键点二（目前）| 空 | 空 | 空 | 空 |</code></p><p>通过第二关后：</p><p><code>|1 开始|2 开始|3 开始（目前）|2 关键点二（可覆盖）| 空 | 空 | 空 |</code></p><p>需要另开一个分支时：（类似栈）</p><p><code>|1 开始|2 开始|3 开始（从这里分支）|3 关键点一（感觉练坏了的地方）| 空 | 空 | ... || &lt;- 分支存档往这个方向增加 - |3 关键点一|</code></p><h2 id="进度备忘"><a href="#进度备忘" class="headerlink" title="进度备忘"></a>进度备忘</h2><p>倒带到第二章开始。黑鹫线。计算表明贝老师正常成长，枪 C 拿弑骑一击，有方案可以死亡骑士初见杀。</p><p>挖白毛也是可选项，但是先尝试上面的。</p><ul><li>开场拉一个协助学生，使用方案有两个：<ul><li>开加速让他冲过去砍一下死亡骑士然后死掉，补一些伤害。</li><li>让他把死亡骑士从 buff 地板上引下来，同样是送。</li></ul></li><li>计策磨血。保守估计，能造成 2 伤害的人大概有三四个。</li><li>贝老师弑骑一击，18 力量能造成 32 点伤害，所以前面伤害补到 14 就可以击杀。</li></ul><p>这么算不是很保险。考虑拉一个白毛做 plan B。</p><p>白毛在第四章结尾邀请协助，理学 C+，差一点点黑暗冲击，法强 18，感觉挖来比强行练贝老师还要顶。</p><p>就是我不喜欢挖人，得查一下攻略。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DLC 给了个超高难度。就尝试一下，学期中不打算玩。&lt;/p&gt;
&lt;p&gt;5 小时体验：超高难度好点受苦的……学期中我有时间玩这个，还不如去写写课程 PJ，从挑战性和「不知道能否成功」体验上来讲这两者没啥区别。&lt;/p&gt;
&lt;p&gt;这游戏在超高难度下比较需要规划，在这里记一些备忘。&lt;/p&gt;
    
    </summary>
    
    
      <category term="game" scheme="http://ofey404.github.io/tags/game/"/>
    
  </entry>
  
  <entry>
    <title>[SOL] HDU 1213 How Many Tables | DS Week 14 A</title>
    <link href="http://ofey404.github.io/2019/12/05/oj-2019-12-Thu-Dec-05-2019-08-51-31-GMT-0800-HDU-1213-How-Many-Tables/"/>
    <id>http://ofey404.github.io/2019/12/05/oj-2019-12-Thu-Dec-05-2019-08-51-31-GMT-0800-HDU-1213-How-Many-Tables/</id>
    <published>2019-12-05T00:51:31.000Z</published>
    <updated>2019-12-05T00:59:52.859Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><blockquote><p>基本信息，题意</p></blockquote><p>请朋友吃饭。</p><blockquote><p>For example: If I tell you A knows B, B knows C, and D knows E, so A, B, C can stay in one table, and D, E have to stay in the other one. So Ignatius needs 2 tables at least.</p></blockquote><p>朋友只愿意和 自己的朋友/朋友愿意同桌吃饭的人 同桌吃饭。求最小桌子数。</p><a id="more"></a><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><blockquote><p>详细描述解题思路，时间空间复杂度</p></blockquote><p>每个朋友是无向图中的一个节点，朋友 A 和朋友 B 认识视为 A B 联通。连通分量数就是需要的桌子数量。</p><p>用一个并查集维护联通的信息。</p><ul><li>初始化；</li><li>为了提高效率，进行路径压缩（不压缩，正确性也是没有问题的）；<ul><li>递归写法：找根的时候，如果找到的节点不是根，就连接到（他父亲节点的根）上</li></ul></li><li>如果输入一个边，两个端点找到的根不同，就把他们的根连在一起；</li></ul><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><blockquote><p>AC 代码</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: Ofey Chan</span></span><br><span class="line"><span class="comment"> * @Date: 2019-12-04 20:30:50</span></span><br><span class="line"><span class="comment"> * @LastEditors: Ofey Chan</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2019-12-04 22:52:03</span></span><br><span class="line"><span class="comment"> * @Description: DS Week 14 A - We love Gromah! </span></span><br><span class="line"><span class="comment"> *               find the number of connected component</span></span><br><span class="line"><span class="comment"> * @Reference: https://en.wikipedia.org/wiki/Disjoint-set_data_structure</span></span><br><span class="line"><span class="comment"> *             https://blog.csdn.net/qq_37497322/article/details/74818172</span></span><br><span class="line"><span class="comment"> *             如何对拍：https://blog.csdn.net/my_sunshine26/article/details/77894284</span></span><br><span class="line"><span class="comment"> *                     https://www.geeksforgeeks.org/diff-command-linux-examples/</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX_N = <span class="number">1e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> T, N, M;</span><br><span class="line"><span class="keyword">int</span> father[MAX_N];  <span class="comment">// disjoint-set</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_disjoint_set</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=N; i++) &#123;</span><br><span class="line">        father[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// path compression</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_father</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (father[v] == v) &#123;</span><br><span class="line">        <span class="keyword">return</span> v;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        father[v] = get_father(father[v]);</span><br><span class="line">        <span class="keyword">return</span> father[v];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cc_count</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=N; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (father[i] == i) count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_djs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=N; i++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; father[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M;</span><br><span class="line">        init_disjoint_set();</span><br><span class="line">        <span class="keyword">while</span> (M--) &#123;</span><br><span class="line">            <span class="keyword">int</span> l, r;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r;</span><br><span class="line">            <span class="comment">// 应该把他们的祖先连在一起。</span></span><br><span class="line">            <span class="keyword">if</span> (get_father(l) != get_father(r)) &#123;</span><br><span class="line">                father[father[r]] = father[l];  <span class="comment">// 在这里调了好久。</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// print_djs();</span></span><br><span class="line">        <span class="comment">// cout &lt;&lt; cc_count() &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">int</span> ans = cc_count();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h2><blockquote><p>细节，在哪犯错了，或者哪里容易出错。有什么结论可以推广的。</p></blockquote><p>并查集统计连通分量，可以直接统计根节点数目。</p><p>给出一个关系，找到它们的祖先之后，连接的应该是它们的祖先，这次居然连成自己了……但是样例是对的……上网查了标程弄了个对拍才查出来。</p><h2 id="Log"><a href="#Log" class="headerlink" title="Log"></a>Log</h2><ul><li>191205 ofey init</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;基本信息，题意&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;请朋友吃饭。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For example: If I tell you A knows B, B knows C, and D knows E, so A, B, C can stay in one table, and D, E have to stay in the other one. So Ignatius needs 2 tables at least.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;朋友只愿意和 自己的朋友/朋友愿意同桌吃饭的人 同桌吃饭。求最小桌子数。&lt;/p&gt;
    
    </summary>
    
    
      <category term="solution" scheme="http://ofey404.github.io/tags/solution/"/>
    
      <category term="disjoint-set" scheme="http://ofey404.github.io/tags/disjoint-set/"/>
    
  </entry>
  
  <entry>
    <title>[LOG] 用 python 画带权重的散点图的手册</title>
    <link href="http://ofey404.github.io/2019/09/22/tech-2019-09-22-matplotlib-scatter/"/>
    <id>http://ofey404.github.io/2019/09/22/tech-2019-09-22-matplotlib-scatter/</id>
    <published>2019-09-22T01:38:44.000Z</published>
    <updated>2019-12-04T07:23:32.779Z</updated>
    
    <content type="html"><![CDATA[<p>简单的任务：画一张带权重的散点图。权重用散点的大小来表示。</p><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote><p>问题产生场景和激发隐藏任务事件/链接/…</p></blockquote><p>画带权重的散点图</p><p><img src="https://matplotlib.org/_images/scatter_demo.png" alt="效果图"></p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><blockquote><p>解决办法适用的环境/版本</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&gt; &#123;screenfetch; conda list numpy; conda list matplotlib&#125;</span><br><span class="line">readlink: illegal option -- f</span><br><span class="line">usage: readlink [-n] [file ...]</span><br><span class="line">                               </span><br><span class="line">                 -/+:.          ofey@OfeydeMacBook-Pro</span><br><span class="line">                :++++.          OS: 64bit Mac OS X 10.14.6 18G95</span><br><span class="line">               /+++/.           Kernel: x86_64 Darwin 18.7.0</span><br><span class="line">       .:-::- .+/:-``.::-       Uptime: 1d 17h 8m</span><br><span class="line">    .:/++++++/::::/++++++/:`    Packages: 115</span><br><span class="line">  .:///////////////////////:`   Shell: zsh 5.3</span><br><span class="line">  ////////////////////////`     Resolution: 2880x1800</span><br><span class="line"> -+++++++++++++++++++++++`      DE: Aqua</span><br><span class="line"> /++++++++++++++++++++++/       WM: Quartz Compositor</span><br><span class="line"> /sssssssssssssssssssssss.      WM Theme: Blue</span><br><span class="line"> :ssssssssssssssssssssssss-     Font: SFMono-Regular</span><br><span class="line">  osssssssssssssssssssssssso/`  CPU: Intel Core i7-8850H @ 2.60GHz</span><br><span class="line">  `syyyyyyyyyyyyyyyyyyyyyyyy+`  GPU: Intel UHD Graphics 630 / Radeon Pro 560X </span><br><span class="line">   `ossssssssssssssssssssss/    RAM: 9051MiB / 16384MiB</span><br><span class="line">     :ooooooooooooooooooo+.    </span><br><span class="line">      `:+oo+/:-..-:/+o+/-      </span><br><span class="line">                               </span><br><span class="line"><span class="comment"># packages in environment at /Users/ofey/miniconda3:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Name                    Version                   Build  Channel</span></span><br><span class="line">numpy                     1.16.4           py37hacdab7b_0  </span><br><span class="line">numpy-base                1.16.4           py37h6575580_0  </span><br><span class="line"><span class="comment"># packages in environment at /Users/ofey/miniconda3:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Name                    Version                   Build  Channel</span></span><br><span class="line">matplotlib                3.1.0            py37h54f8f79_0</span><br></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote><p>详细描述问题的范畴/条件/上下文/…</p></blockquote><ul><li><p>数据的前期处理。</p></li><li><p>散点图的绘制</p></li><li><input disabled type="checkbox"> <p>细粒度的控制：有些有权重，有些没有。（需要么？存疑）</p></li></ul><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><blockquote><p>逐步说明用什么工具, 在哪儿, 进行什么操作, 如何检验, 应该获得什么输出 …</p></blockquote><p>参考了 <a href="https://matplotlib.org/gallery.html" target="_blank" rel="noopener">matplotlib gallery</a>。</p><p>这是一个很棒的网站，上面有大多数普通绘图要求的例子。</p><p>以下代码来自 <a href="https://matplotlib.org/examples/shapes_and_collections/scatter_demo.html" target="_blank" rel="noopener">scatter demo</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">Simple demo of a scatter plot.</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">N = <span class="number">50</span></span><br><span class="line">x = np.random.rand(N)</span><br><span class="line">y = np.random.rand(N)</span><br><span class="line">colors = np.random.rand(N)</span><br><span class="line">area = np.pi * (<span class="number">15</span> * np.random.rand(N))**<span class="number">2</span>  <span class="comment"># 0 to 15 point radii</span></span><br><span class="line"></span><br><span class="line">plt.scatter(x, y, s=area, c=colors, alpha=<span class="number">0.5</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>scatter 的手册：<a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.scatter.html?highlight=scatter#matplotlib.pyplot.scatter" target="_blank" rel="noopener">matplotlib.pyplot.scatter</a></p><p>重要参数：</p><ul><li>s: marker size. 散点图点的大小。和前面的 x/y array 长度一致。</li><li>c: colors. 散点的颜色。可以传递一个 color string（eg: ‘#bcbd22’，也可以传递长度和 x/y 相同的一个 array）</li></ul><h3 id="如何在实际情况中使用"><a href="#如何在实际情况中使用" class="headerlink" title="如何在实际情况中使用"></a>如何在实际情况中使用</h3><p>将数据读入 python 脚本，并转换成 np.array 格式。</p><p>然后进行必要的处理，colormap 的决定。</p><p>然后绘图。</p><h3 id="标题和坐标轴"><a href="#标题和坐标轴" class="headerlink" title="标题和坐标轴"></a>标题和坐标轴</h3><p>参考绘图<a href="https://matplotlib.org/gallery/lines_bars_and_markers/bar_stacked.html#sphx-glr-gallery-lines-bars-and-markers-bar-stacked-py" target="_blank" rel="noopener">Stacked Bar Graph</a></p><p>参考绘图中的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plt.ylabel(<span class="string">'Scores'</span>)</span><br><span class="line">plt.title(<span class="string">'Scores by group and gender'</span>)</span><br><span class="line">plt.xticks(ind, (<span class="string">'G1'</span>, <span class="string">'G2'</span>, <span class="string">'G3'</span>, <span class="string">'G4'</span>, <span class="string">'G5'</span>))</span><br><span class="line">plt.yticks(np.arange(<span class="number">0</span>, <span class="number">81</span>, <span class="number">10</span>))</span><br><span class="line">plt.legend((p1[<span class="number">0</span>], p2[<span class="number">0</span>]), (<span class="string">'Men'</span>, <span class="string">'Women'</span>))</span><br></pre></td></tr></table></figure><p>手册：</p><ul><li><a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.title.html?highlight=title" target="_blank" rel="noopener">matplotlib.pyplot.title</a></li><li><a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.ylabel.html#matplotlib.pyplot.ylabel" target="_blank" rel="noopener">matplotlib.pyplot.ylabel</a></li><li><a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.xticks.html#matplotlib.pyplot.xticks" target="_blank" rel="noopener">matplotlib.pyplot.xticks</a></li></ul><p>title 通过参数可以控制字体，位置和对齐（左中右）。但是一般情况下（参考 gallery 的<a href="https://matplotlib.org/gallery/lines_bars_and_markers/bar_stacked.html#sphx-glr-gallery-lines-bars-and-markers-bar-stacked-py" target="_blank" rel="noopener">例子</a>）直接<code>plt.title(&#39;My Title&#39;)</code>就完事了。</p><h3 id="中文问题"><a href="#中文问题" class="headerlink" title="中文问题"></a>中文问题</h3><p>Mac 的 matplotlib 在图片中插中文字会变成方块。</p><p>目前没什么解法……主要字体问题很麻烦，懒得去弄。</p><p>尽量避免吧……</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>再次说明经验应用要注意的, 容易出问题的点, 以及有助记忆的作弊条…</p></blockquote><p>用 scatter 绘图。内置了需要的所有功能。</p><h2 id="refer"><a href="#refer" class="headerlink" title="refer"></a>refer</h2><blockquote><p>过程中参考过的重要文章/图书/模块/代码/…</p></blockquote><p>永远的: <a href="https://gitlab.com/101camp/2py/tasks/wikis/HandBooks/Hb4Ask" target="_blank" rel="noopener">如何提问</a></p><p><a href="https://matplotlib.org/gallery.html" target="_blank" rel="noopener">matplotlib gallery</a></p><h2 id="logging"><a href="#logging" class="headerlink" title="logging:"></a>logging:</h2><blockquote><p>用倒序日期排列来从旧到新记要关键变化</p></blockquote><ul><li>190922 ofey404 init</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单的任务：画一张带权重的散点图。权重用散点的大小来表示。&lt;/p&gt;
    
    </summary>
    
    
      <category term="handbook" scheme="http://ofey404.github.io/tags/handbook/"/>
    
  </entry>
  
  <entry>
    <title>[LOG] 在 macOS Mojave 上使用 gdb 的手册……</title>
    <link href="http://ofey404.github.io/2019/09/18/tech-2019-09-18-macos-gdb/"/>
    <id>http://ofey404.github.io/2019/09/18/tech-2019-09-18-macos-gdb/</id>
    <published>2019-09-18T03:20:00.000Z</published>
    <updated>2019-12-04T07:23:32.779Z</updated>
    
    <content type="html"><![CDATA[<p>用 brew 直接 install 的 gdb 在 macOS Mojave 上有大问题，大概是因为 macOS 的安全政策收紧。</p><p>解法分三步：</p><ul><li>从源码编译可靠版本的gdb</li><li>用 mac 钥匙串给 gdb 签名。</li><li>配置 <code>~/.gdbinit</code> 文件</li></ul><p>搞死我了……</p><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote><p>问题产生场景和激发隐藏任务事件/链接/…</p></blockquote><p>想用 gdb 调试 fortran。好像也只有 gdb 可以调试 fortran，osx 的 lldb 不支持。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><blockquote><p>解决办法适用的环境/版本</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&gt; screenfetch ; gcc -v ; gdb -v</span><br><span class="line">readlink: illegal option -- f</span><br><span class="line">usage: readlink [-n] [file ...]</span><br><span class="line"></span><br><span class="line">                 -/+:.          ofey@OfeydeMacBook-Pro</span><br><span class="line">                :++++.          OS: 64bit Mac OS X 10.14.6 18G95</span><br><span class="line">               /+++/.           Kernel: x86_64 Darwin 18.7.0</span><br><span class="line">       .:-::- .+/:-``.::-       Uptime: 11h 49m</span><br><span class="line">    .:/++++++/::::/++++++/:`    Packages: 111</span><br><span class="line">  .:///////////////////////:`   Shell: zsh 5.3</span><br><span class="line">  ////////////////////////`     Resolution: 2880x1800</span><br><span class="line"> -+++++++++++++++++++++++`      DE: Aqua</span><br><span class="line"> /++++++++++++++++++++++/       WM: Quartz Compositor</span><br><span class="line"> /sssssssssssssssssssssss.      WM Theme: Blue</span><br><span class="line"> :ssssssssssssssssssssssss-     Font: RobotoMonoForPowerline-Regular 12</span><br><span class="line">  osssssssssssssssssssssssso/`  CPU: Intel Core i7-8850H @ 2.60GHz</span><br><span class="line">  `syyyyyyyyyyyyyyyyyyyyyyyy+`  GPU: Intel UHD Graphics 630 / Radeon Pro 560X</span><br><span class="line">   `ossssssssssssssssssssss/    RAM: 9312MiB / 16384MiB</span><br><span class="line">     :ooooooooooooooooooo+.</span><br><span class="line">      `:+oo+/:-..-:/+o+/-</span><br><span class="line"></span><br><span class="line">Configured with: --prefix=/Library/Developer/CommandLineTools/usr --with-gxx-include-dir=/Library/Developer/CommandLineTools/SDKs/MacOSX10.14.sdk/usr/include/c++/4.2.1</span><br><span class="line">Apple LLVM version 10.0.1 (clang-1001.0.46.4)</span><br><span class="line">Target: x86_64-apple-darwin18.7.0</span><br><span class="line">Thread model: posix</span><br><span class="line">InstalledDir: /Library/Developer/CommandLineTools/usr/bin</span><br><span class="line">GNU gdb (GDB) 8.2.50.20190226-git</span><br><span class="line">Copyright (C) 2019 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote><p>详细描述问题的范畴/条件/上下文/…</p></blockquote><p>原本是用 homebrew 安装的 gdb，出现如下问题：</p><p>gdb 出现 Unable to find Mach Port。类似这个Issue下出现的：<a href="https://github.com/cs01/gdbgui/issues/55" target="_blank" rel="noopener">Unable to find Mach task port #55</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Unable to find Mach task port <span class="keyword">for</span> process-id 19311: (os/kern) failure (0x5).\n (please check gdb is codesigned - see taskgated(8))</span><br></pre></td></tr></table></figure><p>gdb 签名之后直接跑死，输出为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(gdb) run</span><br><span class="line">Starting program: /Users/tnash/AppProjects/password/target/debug/password</span><br><span class="line">Note: this version of macOS has System Integrity Protection.</span><br><span class="line">Because `startup-with-shell<span class="string">' is enabled, gdb has worked around this by</span></span><br><span class="line"><span class="string">caching a copy of your shell.  The shell used by "run" is now:</span></span><br><span class="line"><span class="string">    /Users/tnash/Library/Caches/gdb/bin/zsh</span></span><br><span class="line"><span class="string">[New Thread 0xc03 of process 27325]</span></span><br><span class="line"><span class="string">[New Thread 0xe03 of process 27325]</span></span><br></pre></td></tr></table></figure><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><blockquote><p>逐步说明用什么工具, 在哪儿, 进行什么操作, 如何检验, 应该获得什么输出 …</p></blockquote><p>参考了该文章：<a href="https://timnash.co.uk/getting-gdb-to-semi-reliably-work-on-mojave-macos/" target="_blank" rel="noopener">Getting gdb to (semi) reliably work on Mojave MacOS</a></p><p>救命了……</p><p>详细参考上面的英文文章，以下只对我的操作做记录。</p><h2 id="从源码编译可靠版本的gdb"><a href="#从源码编译可靠版本的gdb" class="headerlink" title="从源码编译可靠版本的gdb"></a>从源码编译可靠版本的gdb</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wget ftp://sourceware.org/pub/gdb/snapshots/current/gdb-weekly-8.2.50.20190226.tar.xz</span><br><span class="line"><span class="comment"># 在桌面上</span></span><br><span class="line">untar gdb-weekly-8.2.50.20190226.tar.xz</span><br><span class="line">gdb-8.2.50.20190226</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"><span class="comment"># 最后把 gdb 的 source 放到 ~/Packages 目录底下去了</span></span><br></pre></td></tr></table></figure><h2 id="用-mac-钥匙串给-gdb-签名。"><a href="#用-mac-钥匙串给-gdb-签名。" class="headerlink" title="用 mac 钥匙串给 gdb 签名。"></a>用 mac 钥匙串给 gdb 签名。</h2><p>先生成license，参考英文文章。</p><p>之后进行如下操作</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">cat gdb.xml</span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE plist PUBLIC <span class="string">"-//Apple//DTD PLIST 1.0//EN"</span></span><br><span class="line"><span class="string">"http://www.apple.com/DTDs/PropertyList-1.0.dtd"</span>&gt;</span><br><span class="line">&lt;plist version=<span class="string">"1.0"</span>&gt;</span><br><span class="line">&lt;dict&gt;</span><br><span class="line">    &lt;key&gt;com.apple.security.cs.allow-jit&lt;/key&gt;</span><br><span class="line">    &lt;<span class="literal">true</span>/&gt;</span><br><span class="line">    &lt;key&gt;com.apple.security.cs.allow-unsigned-executable-memory&lt;/key&gt;</span><br><span class="line">    &lt;<span class="literal">true</span>/&gt;</span><br><span class="line">    &lt;key&gt;com.apple.security.cs.allow-dyld-environment-variables&lt;/key&gt;</span><br><span class="line">    &lt;<span class="literal">true</span>/&gt;</span><br><span class="line">    &lt;key&gt;com.apple.security.cs.disable-library-validation&lt;/key&gt;</span><br><span class="line">    &lt;<span class="literal">true</span>/&gt;</span><br><span class="line">    &lt;key&gt;com.apple.security.cs.disable-executable-page-protection&lt;/key&gt;</span><br><span class="line">    &lt;<span class="literal">true</span>/&gt;</span><br><span class="line">    &lt;key&gt;com.apple.security.cs.debugger&lt;/key&gt;</span><br><span class="line">    &lt;<span class="literal">true</span>/&gt;</span><br><span class="line">    &lt;key&gt;com.apple.security.get-task-allow&lt;/key&gt;</span><br><span class="line">    &lt;<span class="literal">true</span>/&gt;</span><br><span class="line">&lt;/dict&gt;</span><br><span class="line">&lt;/plist&gt;</span><br><span class="line"></span><br><span class="line">codesign --entitlements gdb.xml -fs gdb-cert /usr/<span class="built_in">local</span>/bin/gdb</span><br></pre></td></tr></table></figure><h2 id="配置-gdbinit-文件"><a href="#配置-gdbinit-文件" class="headerlink" title="配置 ~/.gdbinit 文件"></a>配置 <code>~/.gdbinit</code> 文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"set startup-with-shell off"</span> &gt;&gt; ~/.gdbinit</span><br></pre></td></tr></table></figure><p>参考了：<a href="https://github.com/cyrus-and/gdb-dashboard/issues/81" target="_blank" rel="noopener"><code>set startup-with-shell off</code> required by macOS Sierra+ #81</a></p><p>和<a href="https://stackoverflow.com/questions/9573683/where-is-gdbinit-is-located-and-how-can-i-edit-it" target="_blank" rel="noopener">Where is .gdbinit is located and how can I edit it?</a></p><h2 id="验证安装完成"><a href="#验证安装完成" class="headerlink" title="验证安装完成"></a>验证安装完成</h2><p>按照<a href="https://undo.io/resources/debugging-fortran-code-gdb/" target="_blank" rel="noopener">How to Debug Fortran Code with GDB</a>操作。能得到合理的输出。</p><h2 id="uninstall"><a href="#uninstall" class="headerlink" title="uninstall"></a>uninstall</h2><p>备查：<a href="https://stackoverflow.com/questions/1439950/whats-the-opposite-of-make-install-i-e-how-do-you-uninstall-a-library-in-li" target="_blank" rel="noopener">What’s the opposite of ‘make install’, i.e. how do you uninstall a library in Linux?</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>再次说明经验应用要注意的, 容易出问题的点, 以及有助记忆的作弊条…</p></blockquote><ul><li>从源码编译可靠版本的gdb</li><li>用 mac 钥匙串给 gdb 签名。</li><li>配置 <code>~/.gdbinit</code> 文件</li></ul><p>遇到编程问题还是要直接搜洋文……</p><p>要熟悉「从源码编译」了……不能老是有<code>make</code>恐惧症。</p><p>macOS 确实也有一些兼容性问题。但是……我升级到了 Catalina 之后怎么办？？？</p><h2 id="refer"><a href="#refer" class="headerlink" title="refer"></a>refer</h2><blockquote><p>过程中参考过的重要文章/图书/模块/代码/…</p></blockquote><p>永远的: <a href="https://gitlab.com/101camp/2py/tasks/wikis/HandBooks/Hb4Ask" target="_blank" rel="noopener">如何提问</a></p><p>超级重要的参考……<a href="https://timnash.co.uk/getting-gdb-to-semi-reliably-work-on-mojave-macos/" target="_blank" rel="noopener">Getting gdb to (semi) reliably work on Mojave MacOS</a></p><h2 id="logging"><a href="#logging" class="headerlink" title="logging:"></a>logging:</h2><blockquote><p>用倒序日期排列来从旧到新记要关键变化</p></blockquote><ul><li>190918 ofey404 init</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用 brew 直接 install 的 gdb 在 macOS Mojave 上有大问题，大概是因为 macOS 的安全政策收紧。&lt;/p&gt;
&lt;p&gt;解法分三步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从源码编译可靠版本的gdb&lt;/li&gt;
&lt;li&gt;用 mac 钥匙串给 gdb 签名。&lt;/li&gt;
&lt;li&gt;配置 &lt;code&gt;~/.gdbinit&lt;/code&gt; 文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;搞死我了……&lt;/p&gt;
    
    </summary>
    
    
      <category term="handbook" scheme="http://ofey404.github.io/tags/handbook/"/>
    
  </entry>
  
  <entry>
    <title>本博客喜提 gitalk 评论区</title>
    <link href="http://ofey404.github.io/2019/09/16/nonsense-2019-09-16-gitalk-comment/"/>
    <id>http://ofey404.github.io/2019/09/16/nonsense-2019-09-16-gitalk-comment/</id>
    <published>2019-09-16T07:21:11.000Z</published>
    <updated>2019-12-05T01:01:56.841Z</updated>
    
    <content type="html"><![CDATA[<p>只要有 github 账号就可以留言了。</p><a id="more"></a><p>参照以下这位大哥的操作指南。写得非常详细。</p><p>Post author: asdfv1929</p><p>Post link: <a href="https://asdfv1929.github.io/2018/01/20/gitalk/" target="_blank" rel="noopener">https://asdfv1929.github.io/2018/01/20/gitalk/</a></p><p>Copyright Notice: All articles in this blog are licensed under CC BY-NC-SA 3.0 unless stating additionally.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;只要有 github 账号就可以留言了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="blog" scheme="http://ofey404.github.io/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>[LOG] 「计算物理基础」课程环境搭建手册</title>
    <link href="http://ofey404.github.io/2019/09/11/tech-2019-09-11-fortran-env/"/>
    <id>http://ofey404.github.io/2019/09/11/tech-2019-09-11-fortran-env/</id>
    <published>2019-09-11T08:41:04.000Z</published>
    <updated>2019-12-04T07:23:32.779Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>日常手册/指北 分享</p></blockquote><h2 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h2><blockquote><p>简洁描述可以以及如何解决当前问题</p></blockquote><p>「计算物理基础」课程的开发环境搭建。</p><p>有问题可以咨询我，或者想要补充。联系方式：</p><ul><li>email：<a href="mailto:ofey206@gmail.com" target="_blank" rel="noopener">ofey206@gmail.com</a></li><li>wechat：ofey404</li><li>南区一期二号楼3013</li></ul><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote><p>问题产生场景和激发隐藏任务事件/链接/…</p></blockquote><p>「计算物理基础」课程需要搭建开发环境，但是老师让同学们各显神通……我觉得这会是一场灾难……有许多肉眼可见的坑……</p><p>我希望让大家都用上优雅的环境，而且 MIT 等等的公开课，无不提供完整的环境 tutorial。环境很重要。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><blockquote><p>解决办法适用的环境/版本</p></blockquote><p>windows 10，mac。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote><p>详细描述问题的范畴/条件/上下文/…</p></blockquote><ul><li>如何安装 fortran？</li><li>如何编译运行程序？</li><li>如何编写得更爽一些？</li></ul><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><blockquote><p>逐步说明用什么工具, 在哪儿, 进行什么操作, 如何检验, 应该获得什么输出 …</p></blockquote><h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><p>太长不看版：</p><ul><li><a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10" target="_blank" rel="noopener">wsl 官方指南</a></li><li><a href="https://code.visualstudio.com/docs/remote/remote-overview" target="_blank" rel="noopener">vscode remote 手册</a></li></ul><p>有同学跟我说，「是不是要装 vs 2003」……我觉得不行。</p><ol><li>fortran 原本是 unix 软件，在 windows 上算移植，想想都很坑</li><li>在 9012 年装 vs 2003，不光很不爽，而且很不靠谱，更别提 vs 是个装了就很难卸掉的主。</li></ol><p>推荐方案 wsl + vscode remote。原生 linux 开发体验。</p><p>wsl——windows subsystem of linux。相当于系统级的超轻量级 linux 虚拟机。我们在它里面安装 fortran，然后使用 vscode 远程功能在里面开发，和本机效果一样。</p><h3 id="wsl-安装"><a href="#wsl-安装" class="headerlink" title="wsl 安装"></a>wsl 安装</h3><p>参考 <a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10" target="_blank" rel="noopener">官方指南</a></p><p>先打开管理员模式的 powershell 运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux</span><br></pre></td></tr></table></figure><p>不知道 powershell 是什么？</p><ol><li>bing / google</li><li>win+x在弹出菜单里选「管理员模式打开 powershell」</li></ol><p>打开 M$ Store （windows 应用商店）搜索 wsl 或者 windows subsystem of linux. 安装。</p><p>ubuntu 16.04就行。</p><p>反馈：M$ store 中不显示版本号，据我查看，默认是 18.04。<strong>所以下面要换源的话，请换 18.04 的源。</strong></p><p>安装完成之后，在开始菜单，所有程序里会多一个 ubuntu。点击，打开一个命令行界面。</p><p>会让你输入 unix 用户名和密码。设置就好，记住它们。</p><h3 id="应用商店上不了？"><a href="#应用商店上不了？" class="headerlink" title="应用商店上不了？"></a>应用商店上不了？</h3><p>因为垃圾 GFW 或者 M$ 本身菜鸡的原因，有的人应用商店上不了。</p><p>其实手册里是有说<a href="https://docs.microsoft.com/en-us/windows/wsl/install-manual" target="_blank" rel="noopener">怎么解决这个问题的。</a></p><p>手动下载一个 appimage，然后运行一行命令就可以了。然而由于垃圾 GFW，该 image 下载奇慢无比。</p><p>我已经下好了，放在小红星书库-「计算物理参考」。链接: <a href="https://pan.baidu.com/s/1PWg-0N-YpGuim6vJ5rCb1w" target="_blank" rel="noopener">https://pan.baidu.com/s/1PWg-0N-YpGuim6vJ5rCb1w</a> 提取码: ga2j</p><p>下载到某个目录，打开管理员模式的 powershell，运行如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd C:\...(你放程序的目录)\</span><br><span class="line">Add-AppxPackage .\Ubuntu_1604.2019.523.0_x64.appx</span><br></pre></td></tr></table></figure><p>就会安装好了。</p><h3 id="安装-fortran"><a href="#安装-fortran" class="headerlink" title="安装 fortran"></a>安装 fortran</h3><p>打开 ubuntu（wsl）的命令行。执行如下语句，以下的语句对 16.04 和 18.04 都是通用的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update (如果很慢就不执行算了)</span><br><span class="line">sudo apt-get install gfortran</span><br></pre></td></tr></table></figure><p><strong>如果下载和update非常慢</strong><br>因为墙的缘故。换国内源。<a href="https://mirror.tuna.tsinghua.edu.cn/help/ubuntu/" target="_blank" rel="noopener">参考清华源说明。</a></p><p>如果是16.04 在上面链接的页面上选择 <code>ubuntu 16.04 LTS</code>，如果是 m$ store 版本请选择 18.04</p><p>在wsl命令行执行以下代码：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mv /etc/apt/sources.list /etc/apt/sources.list.backup <span class="comment"># 备份原来的源</span></span><br><span class="line">sudo nano /etc/apt/sources.list  <span class="comment"># 这条命令会打开一个编辑器。创建新的 sources.list</span></span><br></pre></td></tr></table></figure><p><strong>坑：有的同学并不知道上面的第二条命令是打开编辑器，结果把 sources.list 备份之后没有创建新的 sources.list</strong></p><p>在打开的编辑器界面中复制<strong>在<a href="https://mirror.tuna.tsinghua.edu.cn/help/ubuntu/" target="_blank" rel="noopener">清华源</a>上看到的，类似以下</strong>的所有代码，然后ctrl-x，再按 Y 保存退出。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">################### 不理解的话，请不要直接复制这些配置！ #########</span></span><br><span class="line"><span class="comment"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class="line"><span class="comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse</span></span><br></pre></td></tr></table></figure><p>然后再<code>apt-get update</code>，<code>apt-get install gfortran</code></p><p>install 跑完之后，在命令行里输入<code>gfortran</code>，会有如下反应，证明 fortran 安装完毕。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(base)  ofey &gt; gfortran</span><br><span class="line">gfortran: fatal error: no input files</span><br><span class="line">compilation terminated.</span><br></pre></td></tr></table></figure><h3 id="fortran-hello-world"><a href="#fortran-hello-world" class="headerlink" title="fortran hello world"></a>fortran hello world</h3><p>用命令行编译运行。书上应该会教，我就不手把手了。</p><p>命令行很多人显然从没接触过。linux bash（命令行）的教程推荐：</p><ul><li><a href="https://www.kancloud.cn/thinkphp/linux-command-line/39431" target="_blank" rel="noopener">the linux command line （中文）</a></li></ul><h3 id="vscode-远程"><a href="#vscode-远程" class="headerlink" title="vscode 远程"></a>vscode 远程</h3><p>其实有命令行已经可以写 fortran 程序了。为了写得更爽一些，我们需要一个漂亮的现代编辑器。</p><p><a href="https://code.visualstudio.com" target="_blank" rel="noopener">安装 vscode。</a></p><p>打开「插件」（左侧从上往下数第五个图标，是几个方块）。搜索<code>remote development</code></p><p>远程开发插件使用参照<a href="https://code.visualstudio.com/docs/remote/wsl" target="_blank" rel="noopener">官方手册</a>，或者我给你讲：</p><p>安装插件 Remote Development。安完之后 vscode 左下角会多一个绿色按钮，按钮上一个大于号一个小于号。</p><p>（一定要）打开之前安装的 wsl 的命令行，不然 vscode 不会知道有 wsl。</p><p>按该按钮，选择 remote-wsl。连上了就完事了。现在你保存文件，就是在 wsl 里保存，写代码，编译，运行用的都是 wsl 里面的 fortran 了。</p><p>按 ctrl+` 打开命令行（bash），用命令编译。</p><h3 id="mac"><a href="#mac" class="headerlink" title="mac"></a>mac</h3><p><code>brew install gfortran</code>然后就完事了。mac 是类 unix 系统，少许多麻烦事。</p><p>不认识该命令请 google/bing ‘homebrew’。</p><h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3><p>你能拿 linux 发行版来做日常系统，那不需要我教了，我们交个朋友吧（我日常用过半年 linux）。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>再次说明经验应用要注意的, 容易出问题的点, 以及有助记忆的作弊条…</p></blockquote><p>windows:</p><ul><li>wsl 安装</li><li>fortran 安装</li><li>vscode remote 配置。</li></ul><h2 id="refer"><a href="#refer" class="headerlink" title="refer"></a>refer</h2><blockquote><p>过程中参考过的重要文章/图书/模块/代码/…</p></blockquote><p>永远的: <a href="https://gitlab.com/101camp/2py/tasks/wikis/HandBooks/Hb4Ask" target="_blank" rel="noopener">如何提问</a></p><ul><li><a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10" target="_blank" rel="noopener">wsl 官方指南</a></li><li><a href="https://code.visualstudio.com/docs/remote/remote-overview" target="_blank" rel="noopener">vscode remote 手册</a></li></ul><h2 id="logging"><a href="#logging" class="headerlink" title="logging:"></a>logging:</h2><blockquote><p>用倒序日期排列来从旧到新记要关键变化</p></blockquote><ul><li>190911 ofey404 init</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;日常手册/指北 分享&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;综述&quot;&gt;&lt;a href=&quot;#综述&quot; class=&quot;headerlink&quot; title=&quot;综述&quot;&gt;&lt;/a&gt;综述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;简洁描述可以以及如何解决当前问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;「计算物理基础」课程的开发环境搭建。&lt;/p&gt;
&lt;p&gt;有问题可以咨询我，或者想要补充。联系方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;email：&lt;a href=&quot;mailto:ofey206@gmail.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ofey206@gmail.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;wechat：ofey404&lt;/li&gt;
&lt;li&gt;南区一期二号楼3013&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="handbook" scheme="http://ofey404.github.io/tags/handbook/"/>
    
  </entry>
  
  <entry>
    <title>[LOG] 我的技术笔记编辑器选择之路</title>
    <link href="http://ofey404.github.io/2019/08/05/articles-2019-08-05-tech-note-editor/"/>
    <id>http://ofey404.github.io/2019/08/05/articles-2019-08-05-tech-note-editor/</id>
    <published>2019-08-05T02:40:41.000Z</published>
    <updated>2019-12-05T01:02:25.607Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>日常手册/指北 分享</p></blockquote><p>如何选择一个用起来省心且爽的技术笔记编辑器。</p><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote><p>问题产生场景和激发隐藏任务事件/链接/…</p></blockquote><p>笔记就像「岩钉」，可以在你掉下去的时候拉住你——走神的时候、中间间隔很长一段时间没做事的时候、踩到坑的时候。</p><p>在 handbook template 底下，没有什么不应该记。即使是对现状的理解、下一步怎么做的想法，也可以在条件允许的情况下记下来。</p><p>所以对技术笔记显然有一个需求——选择合适的编辑器，让编辑体验变好，笔记效率提升。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><blockquote><p>解决办法适用的环境/版本</p></blockquote><p>Mac OS X。</p><p>也提供了 windows 和 linux 下的类似物的讨论。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote><p>详细描述问题的范畴/条件/上下文/…</p></blockquote><p>技术笔记记录的需求</p><ul><li>对代码支持良好<ul><li>word 等富文本基本 pass</li></ul></li><li>编辑速度快<ul><li>富文本再次 pass</li></ul></li><li>有可能会有图片<ul><li>纯 markdown 在这里有一些劣势，图片会把目录树结构搞得乱七八糟</li><li>库结构文件管理+增强markdown格式可以比较舒服地解决该痛点</li></ul></li><li>发布方便<ul><li>markdown，或者对导出支持良好的编辑器。</li></ul></li></ul><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><blockquote><p>逐步说明用什么工具, 在哪儿, 进行什么操作, 如何检验, 应该获得什么输出 …</p></blockquote><p>现在在记技术笔记用的是 quiver，表达类写作使用 setapp 里白嫖的 ulysses。编辑散的 markdown 文档使用的是 vscode。这些选择并不是唯一的「最好」，而是和我工作流程、手上设备较为契合的「选择」。</p><p>我用过的笔记类软件/编辑器不完全清单：<br>evernote onenote goodnote boostnote noteability typora vscode vim spacemacs wonderpen quiver</p><h3 id="文件管理–外包-vs-库模式？"><a href="#文件管理–外包-vs-库模式？" class="headerlink" title="文件管理–外包 vs 库模式？"></a>文件管理–外包 vs 库模式？</h3><p>有的编辑器根本不操心文件管理，遵守了 unix 哲学。这方面的典型就是 <a href="https://typora.io" target="_blank" rel="noopener">Typora</a>.</p><p>只在编辑纯 markdown 的体验上，Typora 大概是目前最好的——且开源免费。</p><p>但是纯 markdown 面临着图片和文档不在一个文件中的问题，给移动、管理文档带来很大麻烦。</p><ul><li>放图床<ul><li>图床容易挂</li></ul></li><li>一个笔记一个文件夹，文件夹里放图片，便于移动<ul><li>平白无故多出一层目录结构</li></ul></li><li>一类笔记统一放一个文件夹<ul><li>单条移动麻烦，也相当于自己手动维护了一个笔记软件</li></ul></li><li>图片转成字符串存在笔记里<ul><li>丑</li></ul></li></ul><p>库结构还可以实现一些纯 markdown 没有的功能，比如说笔记标签。</p><p>总结：</p><ul><li>纯 markdown + 自己管理文件<ul><li>图片麻烦</li><li>工具链简单，hackable</li></ul></li><li>库结构<ul><li>封闭</li><li>可以实现一些额外功能</li><li>图片 ok</li></ul></li></ul><h3 id="vim-编辑模式"><a href="#vim-编辑模式" class="headerlink" title="vim 编辑模式"></a>vim 编辑模式</h3><p>vim 编辑模式重要么？中文输入法下 vim 键位绑定往往会有一些问题，例如退出插入模式之后输入先被输入法捕捉。有插件可以解决问题，vscode、 vim、spacemacs 都提供这种插件，但是麻烦。</p><p>还有一个加快编辑时移动速度的方案，使用 emacs 键绑定避免和中文输入冲突。mac 系统级自带了这种移动方式——c-f right; c-b left; c-p up; c-n down，深得我心。所有 mac 平台上的编辑器都可以享受这种福利。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>再次说明经验应用要注意的, 容易出问题的点, 以及有助记忆的作弊条…</p></blockquote><p>分歧点</p><ul><li>图片支持</li><li>库模式/自己管理文件</li></ul><table><thead><tr><th align="center">编辑器</th><th>编辑爽度</th><th>代码支持</th><th>自带文件管理</th><th>图片支持</th><th>扩展性/插件</th><th>vim模式</th></tr></thead><tbody><tr><td align="center">vscode</td><td>+</td><td>+++</td><td>-</td><td>-</td><td>+++</td><td>+</td></tr><tr><td align="center">typora</td><td>+++</td><td>+</td><td>-</td><td>-</td><td>-</td><td>-</td></tr><tr><td align="center">quiver</td><td>++</td><td>++</td><td>+</td><td>+</td><td>-</td><td>-</td></tr><tr><td align="center">boostnote</td><td>+</td><td>++</td><td>+</td><td>?</td><td>+</td><td>+</td></tr><tr><td align="center">vim/spacemacs</td><td>+++</td><td>++</td><td>-</td><td>-</td><td>+++</td><td>+</td></tr></tbody></table><p>平台支持</p><ul><li>win<ul><li>typora</li><li>vscode</li><li>boostnote</li></ul></li><li>mac<ul><li>typora</li><li>vscode</li><li>boostnote</li><li>quiver</li><li>vim/emacs</li></ul></li><li>linux<ul><li>typora</li><li>vscode</li><li>boostnote</li><li>vim/emacs</li></ul></li></ul><h2 id="refer"><a href="#refer" class="headerlink" title="refer"></a>refer</h2><blockquote><p>过程中参考过的重要文章/图书/模块/代码/…</p></blockquote><p>永远的: <a href="https://gitlab.com/101camp/2py/tasks/wikis/HandBooks/Hb4Ask" target="_blank" rel="noopener">如何提问</a></p><h2 id="logging"><a href="#logging" class="headerlink" title="logging:"></a>logging:</h2><blockquote><p>用倒序日期排列来从旧到新记要关键变化</p></blockquote><ul><li>190805 ofey init</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;日常手册/指北 分享&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如何选择一个用起来省心且爽的技术笔记编辑器。&lt;/p&gt;
    
    </summary>
    
    
      <category term="productivity" scheme="http://ofey404.github.io/tags/productivity/"/>
    
  </entry>
  
  <entry>
    <title>[LOG] 用 docker 建立 julia 环境的手册</title>
    <link href="http://ofey404.github.io/2019/07/28/tech-2019-07-28-log-julia-environment-with-docker/"/>
    <id>http://ofey404.github.io/2019/07/28/tech-2019-07-28-log-julia-environment-with-docker/</id>
    <published>2019-07-28T04:59:28.000Z</published>
    <updated>2019-12-04T07:23:32.779Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>日常手册/指北 分享</p></blockquote><h2 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h2><blockquote><p>简洁描述可以以及如何解决当前问题</p></blockquote><p>julia 是先进的数据处理语言。要运行 julia 代码，就需要一个环境。</p><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote><p>问题产生场景和激发隐藏任务事件/链接/…</p></blockquote><p>实验室需要我跑一个代码，是用 julia 写的。</p><p><a href="https://github.com/jarvist/PolaronMobility.jl" target="_blank" rel="noopener">jarvist/PolaronMobility.jl</a></p><h3 id="隐藏任务：如何在终端里炫酷地展示系统信息"><a href="#隐藏任务：如何在终端里炫酷地展示系统信息" class="headerlink" title="隐藏任务：如何在终端里炫酷地展示系统信息"></a>隐藏任务：如何在终端里炫酷地展示系统信息</h3><p>mac 环境。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">brew install screenfetch</span><br><span class="line"></span><br><span class="line">screenfetch</span><br><span class="line"></span><br><span class="line">                 -/+:.          ofey@OfeydeMacBook-Pro</span><br><span class="line">                :++++.          OS: 64bit Mac OS X 10.14.5 18F203</span><br><span class="line">               /+++/.           Kernel: x86_64 Darwin 18.6.0</span><br><span class="line">       .:-::- .+/:-``.::-       Uptime: 1d 10h 26m</span><br><span class="line">    .:/++++++/::::/++++++/:`    Packages: 56</span><br><span class="line">  .:///////////////////////:`   Shell: zsh 5.3</span><br><span class="line">  ////////////////////////`     Resolution: 2880x1800</span><br><span class="line"> -+++++++++++++++++++++++`      DE: Aqua</span><br><span class="line"> /++++++++++++++++++++++/       WM: Quartz Compositor</span><br><span class="line"> /sssssssssssssssssssssss.      WM Theme: Blue</span><br><span class="line"> :ssssssssssssssssssssssss-     Font: RobotoMonoForPowerline-Regular 12</span><br><span class="line">  osssssssssssssssssssssssso/`  CPU: Intel Core i7-8850H @ 2.60GHz</span><br><span class="line">  `syyyyyyyyyyyyyyyyyyyyyyyy+`  GPU: Intel UHD Graphics 630 / Radeon Pro 560X</span><br><span class="line">   `ossssssssssssssssssssss/    RAM: 8435MiB / 16384MiB</span><br><span class="line">     :ooooooooooooooooooo+.</span><br><span class="line">      `:+oo+/:-..-:/+o+/-</span><br></pre></td></tr></table></figure><p>ref：<a href="http://macappstore.org/screenfetch/" target="_blank" rel="noopener">Install screenfetch on Mac OSX</a></p><h3 id="隐藏任务：如何访问-docker-容器中的-jupyter-notebook"><a href="#隐藏任务：如何访问-docker-容器中的-jupyter-notebook" class="headerlink" title="隐藏任务：如何访问 docker 容器中的 jupyter notebook"></a>隐藏任务：如何访问 docker 容器中的 jupyter notebook</h3><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><blockquote><p>解决办法适用的环境/版本</p></blockquote><ul><li>Docker version 18.09.2, build 6247962</li><li>OS: 64bit Mac OS X 10.14.5 18F203</li><li>vscode: 1.36.1 2213894ea0415ee8c85c5eea0d0ff81ecc191529 x64</li></ul><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><blockquote><p>详细描述问题的范畴/条件/上下文/…</p></blockquote><p>如何迅速在 Mac OS X 上安装好可用好用的 julia 环境。</p><p>解决方案的几点要求</p><ul><li>简单，不容易掉坑；</li><li>最好可以用熟悉的开发环境；</li><li>最好跨平台，经验可以复用；</li></ul><p>所以选择全平台，容器化的应用 docker。控制 docker 的客户端使用 vscode 的插件，容器内开发使用 vscode 的远程模式。</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><blockquote><p>逐步说明用什么工具, 在哪儿, 进行什么操作, 如何检验, 应该获得什么输出 …</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull julia  <span class="comment"># minimal version, official, without jupyter notebook support.</span></span><br></pre></td></tr></table></figure><h3 id="run-container-in-a-disposable-mode"><a href="#run-container-in-a-disposable-mode" class="headerlink" title="run container in a disposable mode"></a>run container in a disposable mode</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Starting the Julia REPL is as easy as the following:</span></span><br><span class="line">docker run -it --rm julia</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run Julia script from your local directory inside container</span></span><br><span class="line">docker run -it --rm -v <span class="string">"<span class="variable">$PWD</span>"</span>:/usr/myapp -w /usr/myapp julia julia script.jl arg1 arg2</span><br></pre></td></tr></table></figure><h3 id="attach-with-vscode"><a href="#attach-with-vscode" class="headerlink" title="attach with vscode"></a>attach with vscode</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v <span class="string">"<span class="variable">$PWD</span>"</span>:/root/ julia</span><br></pre></td></tr></table></figure><p>Then attach container with vscode-remote.</p><p>tutorial: <a href="https://code.visualstudio.com/docs/remote/containers" target="_blank" rel="noopener">Developing inside a Container</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>再次说明经验应用要注意的, 容易出问题的点, 以及有助记忆的作弊条…</p></blockquote><p>直接用 docker 拉取镜像，运行就可以了。</p><h2 id="refer"><a href="#refer" class="headerlink" title="refer"></a>refer</h2><blockquote><p>过程中参考过的重要文章/图书/模块/代码/…</p></blockquote><ul><li>永远的: <a href="https://gitlab.com/101camp/2py/tasks/wikis/HandBooks/Hb4Ask" target="_blank" rel="noopener">如何提问</a></li><li><a href="https://lectures.quantecon.org/jl/getting_started.html" target="_blank" rel="noopener">Setting up Your Julia Environment¶</a></li><li><a href="https://medium.com/fundbox-engineering/overview-d3759e83969c" target="_blank" rel="noopener">Running local Jupyter (and JupyterLab) env with Docker</a></li><li><a href="https://hub.docker.com/_/julia" target="_blank" rel="noopener">julia Docker Official Images</a></li></ul><h2 id="logging"><a href="#logging" class="headerlink" title="logging:"></a>logging:</h2><blockquote><p>用倒序日期排列来从旧到新记要关键变化</p></blockquote><ul><li>190728 ofey init</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;日常手册/指北 分享&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;综述&quot;&gt;&lt;a href=&quot;#综述&quot; class=&quot;headerlink&quot; title=&quot;综述&quot;&gt;&lt;/a&gt;综述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;简洁描述可以以及如何解决当前问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;julia 是先进的数据处理语言。要运行 julia 代码，就需要一个环境。&lt;/p&gt;
    
    </summary>
    
    
      <category term="handbook" scheme="http://ofey404.github.io/tags/handbook/"/>
    
      <category term="julia" scheme="http://ofey404.github.io/tags/julia/"/>
    
  </entry>
  
  <entry>
    <title>Issue 管理入门指北</title>
    <link href="http://ofey404.github.io/2019/07/16/tech-introduction-to-issue-management/"/>
    <id>http://ofey404.github.io/2019/07/16/tech-introduction-to-issue-management/</id>
    <published>2019-07-16T07:34:36.000Z</published>
    <updated>2019-12-04T07:23:32.779Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Consistent use of an issue or bug tracking system is considered one of the “hallmarks of a good software team”. – wikipedia</p></blockquote><p>作为社会化软件开发的必备技能，本文分享一些 Issue 管理的常识。</p><a id="more"></a><p>以下皆为本人阅读积累和逻辑分析，结论是保持开放的。</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote><p>问题产生场景和激发隐藏任务事件/链接/…</p></blockquote><p>本文来自微信群中和大妈的一段对话：</p><blockquote><p>【大妈】：<br>在俺的直觉中:<br>0: Issue 根据性质/内容/目标不同, 有不同生命周期<br>1: 为了提醒大家和自己,在标题中注明是最好的<br>比如: 2d[FAQ] 如何下载git?<br>2: 关闭, 并不代表死亡..只是为了保证 Issue 首页能看到所有活跃提案, 甚至于, 先关闭, 自己完善到一定程度, 再打开公示也可以</p></blockquote><p>camp2py 学员们的信息交流、问题讨论，主要使用 <a href="https://gitlab.com/101camp/2py/tasks/issues" target="_blank" rel="noopener">task 仓库的 Issue 页面</a>。只要参与课程讨论，一定会使用 Issue。可预见将来参与正规的软件开发也会如此，Issue 的管理是合作软件开发中重要的一环，更是开源软件工作流程中不可或缺的一环。</p><p>既然要学习 Issue 的管理，那么就要回答以下问题：</p><ol><li>Issue 有什么用？为什么要进行 Issue 管理？</li><li>有哪些种类的 Issue？各种 Issue 一般又有什么样的模版？</li><li>何时应该创建一个 Issue？关闭一个 Issue 呢？哪些信息又不应该放进 Issue？</li><li>如何才能持续收到 Issue 页面的更新？</li><li>（进阶，本次不准备回答）对开源软件，作为用户/普通贡献者/仓库管理者分别有什么样的 Issue 管理原则和注意事项？</li></ol><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><blockquote><p>解决办法适用的环境/版本</p></blockquote><p>github、gitlab 都有内建的 Issue 功能。但是 Issue Track System 的范畴比这些例子要广一些，是一类软件系统的统称。</p><p>Issue Track System 在某些方面类似 Bug Tracker，wikipedia 上有个 <a href="https://en.wikipedia.org/wiki/Comparison_of_issue-tracking_systems" target="_blank" rel="noopener">issue tracking system 的比较</a>。</p><h2 id="问题和回答"><a href="#问题和回答" class="headerlink" title="问题和回答"></a>问题和回答</h2><blockquote><p>详细描述问题的范畴/条件/上下文/…<br>【回答的可操作性】逐步说明用什么工具, 在哪儿, 进行什么操作, 如何检验, 应该获得什么输出 …</p></blockquote><h3 id="Issue-有什么用？为什么要进行-Issue-管理？"><a href="#Issue-有什么用？为什么要进行-Issue-管理？" class="headerlink" title="Issue 有什么用？为什么要进行 Issue 管理？"></a>Issue 有什么用？为什么要进行 Issue 管理？</h3><p>Issue 是团队内/团队和外部用户之间交流的一个渠道，直接和某个代码库相关联。同时采取「公告板」形式，和不分主题的「聊天记录」形式相对，一个帖子的讨论历史集中，便于查找。</p><p>因此 Issue 的适用条件：</p><ul><li>以某个代码库为中心的讨论；</li><li>文本量较大，更接近电邮、文章而非聊天的讨论；</li><li>可能需要持续很长时间（数天、数月）的讨论；</li><li>同一主题下回复历史中的信息非常重要的讨论；</li><li>记录需要长期保存以备查找的讨论。</li></ul><p>Issue 是「信息流模式」——和以逻辑联系的「wiki模式」或者说「书籍模式」相对。不断有新的 Issue Open，生命周期结束的 Issue Close，Issue 的页面的经典阅读模式也是从上到下的流模式，外加检索和筛选功能。</p><p>因此：</p><ul><li>每种 Issue 都必须有其生命周期，必须在某个时刻关闭，因为首页的空间资源和团队的注意力资源都是有限的。</li><li>同时 Issue 作为一个「流模式」讨论版，除了记录关闭后的归档之外，不应该承担任何知识库的功能。<ul><li>任何在关闭后有用的信息都应该整理归档到其他地方。例如：</li><li>「常见问题」在关闭后应该归档到项目 wiki 专门的 FAQ 收集页面（虽然现在还不存在）；</li><li>「工具指南」应该归档到团队的知识库，在蟒营也是项目 wiki 的知识库页面。</li></ul></li></ul><p>重申一遍原则：</p><ol><li>Issue 不承担知识库的功能，任何完善到可用的 Issue 都应该及时整理归档，保持 Issue 页面整洁。</li><li>（几乎）任何 Issue 都需要在某个时刻关闭。</li></ol><h3 id="有哪些种类的-Issue？创建-Issue-又有什么样的要求和模版？"><a href="#有哪些种类的-Issue？创建-Issue-又有什么样的要求和模版？" class="headerlink" title="有哪些种类的 Issue？创建 Issue 又有什么样的要求和模版？"></a>有哪些种类的 Issue？创建 Issue 又有什么样的要求和模版？</h3><p>普适的我没精力去整理。本课程的学习中出现了如下几种 Issue，所有模版在 Issue 页面点击 <a href="https://gitlab.com/101camp/2py/tasks/issues/new?issue%5Bassignee_id%5D=&issue%5Bmilestone_id%5D=" target="_blank" rel="noopener">New Issue</a> 按钮可以看到。</p><p>对一个项目，常见的 Issue 最好要有模版，可以复用。</p><ul><li>Ask 模版：日常提问模板。</li><li>Report 模版：学员周任务汇报模版，标题格式——[任务周] &lt;学员ID&gt; (心情断言)</li><li>Handbook 模版，tag [FAQ]：日常手册/指北 分享。</li></ul><p><strong>[FAQ] tag 滥用的问题</strong></p><p>目前大家似乎在滥用 [FAQ] tag，普通的提问并不值得成为所谓的”Frequent Asked Question”。一是不一定 Frequent，二是普通提问的可阅读性、知识密度往往很难有「手册」级别的价值。</p><p>信息爆炸成一团噪音，信息则无价值。[FAQ] 这个 tag 应该是对那些作者努力收集了所有可用信息，改善了文章的可读性、泛用性，同时又真正能帮到许多人的文章的标志。换言之标[FAQ]应该是作者对内容质量的一个承诺。</p><h3 id="何时应该创建一个-Issue？"><a href="#何时应该创建一个-Issue？" class="headerlink" title="何时应该创建一个 Issue？"></a>何时应该创建一个 Issue？</h3><p>模版的类型基本可以回答大部分「何时创建」的问题了。「信息过载」的度请各位自行判断。</p><p>同时对模版覆盖不了的情况，再次重申 Issue 的适用条件：</p><ul><li>以某个代码库为中心的讨论；</li><li>文本量较大，更接近电邮、文章而非聊天的讨论；</li><li>可能需要持续很长时间（数天、数月）的讨论；</li><li>同一主题下回复历史中的信息非常重要的讨论；</li><li>记录需要长期保存以备查找的讨论。</li></ul><p>有时有可能是模版还没 cover 到，所以各位可以适时地自己创造模版，然后发布在社区中。</p><h3 id="何时关闭一个-Issue-？"><a href="#何时关闭一个-Issue-？" class="headerlink" title="何时关闭一个 Issue ？"></a>何时关闭一个 Issue ？</h3><p>Issue 一定需要关闭。「关闭」意味着 Issue 不会出现在 Open 栏，相当于被暂时归档。</p><p>关闭的 Issue 仍然可以被查找，只是相当于不出现在首页上，不占用大家宝贵的注意力资源。同时关闭了的 Issue 也可以重新被打开。</p><p>各种类型 Issue 的推定关闭时机</p><ul><li>提问 Issue——问题解答后关闭。视热度选择是否进一步处理，成为一篇文章。</li><li>FAQ Issue——文章完善后关闭，归档到对应的知识库。</li><li>特殊功能型 Issue——完成功能立刻关闭。例如“Hello World” Issue。</li><li>需要他人确认、合作的Issue——完成功能后关闭。例如周任务报告，可能需要老师确认。</li></ul><h3 id="哪些信息又不应该放进-Issue？"><a href="#哪些信息又不应该放进-Issue？" class="headerlink" title="哪些信息又不应该放进 Issue？"></a>哪些信息又不应该放进 Issue？</h3><p>永远的: <a href="https://gitlab.com/101camp/2py/tasks/wikis/HandBooks/Hb4Ask" target="_blank" rel="noopener">如何提问</a></p><h3 id="如何才能持续收到-Issue-页面的更新？"><a href="#如何才能持续收到-Issue-页面的更新？" class="headerlink" title="如何才能持续收到 Issue 页面的更新？"></a>如何才能持续收到 Issue 页面的更新？</h3><p>gitlab 的 Issue 页面有 <a href="https://gitlab.com/101camp/2py/tasks/issues.atom?feed_token=kHJS1J-xZ5reczvJ89eh&state=opened" target="_blank" rel="noopener">RSS feed</a>。</p><p>用 RSS 接收 Issue 更新似乎是业界的普遍实践。如果大家有不了解 RSS 的，可以参考这一篇 <a href="https://sspai.com/post/54658" target="_blank" rel="noopener">中文文章</a>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote><p>再次说明经验应用要注意的, 容易出问题的点, 以及有助记忆的作弊条…</p></blockquote><ol><li>Issue 不承担知识库的功能，任何完善到可用的 Issue 都应该及时整理归档，保持 Issue 页面整洁。</li><li>（几乎）任何 Issue 都需要在某个时刻关闭。</li><li>对 [FAQ] tag 的滥用：<ul><li>[FAQ] 这个 tag 应该是对那些作者努力收集了所有可用信息，改善了文章的可读性、泛用性，同时又真正能帮到许多人的文章的标志。换言之标[FAQ]应该是作者对内容质量的一个承诺。</li></ul></li><li>各种类型 Issue 的推定关闭时机<ul><li>提问 Issue——问题解答后关闭。视热度选择是否进一步处理，成为一篇文章。</li><li>FAQ Issue——文章完善后关闭，归档到对应的知识库。</li><li>特殊功能型 Issue——完成功能立刻关闭。例如“Hello World” Issue。</li><li>需要他人确认、合作的Issue——完成功能后关闭。例如周任务报告，可能需要老师确认。</li></ul></li></ol><h2 id="refer"><a href="#refer" class="headerlink" title="refer"></a>refer</h2><blockquote><p>过程中参考过的重要文章/图书/模块/代码/…</p></blockquote><ul><li><a href="https://en.wikipedia.org/wiki/Issue_tracking_system#cite_note-2" target="_blank" rel="noopener">Issue tracking system</a></li><li><a href="https://www.projectmanager.com/training/managing-project-issues" target="_blank" rel="noopener">7 Steps for Managing Project Issues</a></li><li>永远的: <a href="https://gitlab.com/101camp/2py/tasks/wikis/HandBooks/Hb4Ask" target="_blank" rel="noopener">如何提问</a></li></ul><h2 id="logging"><a href="#logging" class="headerlink" title="logging:"></a>logging:</h2><blockquote><p>用倒序日期排列来从旧到新记要关键变化</p><ul><li>190716 init</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Consistent use of an issue or bug tracking system is considered one of the “hallmarks of a good software team”. – wikipedia&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作为社会化软件开发的必备技能，本文分享一些 Issue 管理的常识。&lt;/p&gt;
    
    </summary>
    
    
      <category term="handbook" scheme="http://ofey404.github.io/tags/handbook/"/>
    
  </entry>
  
  <entry>
    <title>Web Scraping Introduction with Scrapy</title>
    <link href="http://ofey404.github.io/2019/07/12/tech-web-scraping-intro-with-scrapy/"/>
    <id>http://ofey404.github.io/2019/07/12/tech-web-scraping-intro-with-scrapy/</id>
    <published>2019-07-12T15:27:41.000Z</published>
    <updated>2019-12-04T07:23:32.779Z</updated>
    
    <content type="html"><![CDATA[<p>Resources</p><ul><li><a href="https://www.datacamp.com/community/tutorials/making-web-crawlers-scrapy-python" target="_blank" rel="noopener">Making Web Crawlers Using Scrapy for Python</a></li><li><a href="https://docs.scrapy.org/en/latest/intro/overview.html" target="_blank" rel="noopener">docs of Scrapy</a></li><li><a href="https://github.com/geekan/scrapy-examples/tree/master/doubanbook" target="_blank" rel="noopener">geekan/scrapy-examples</a></li></ul><a id="more"></a><h2 id="Create-a-project"><a href="#Create-a-project" class="headerlink" title="Create a project"></a>Create a project</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject &lt;names&gt;</span><br></pre></td></tr></table></figure><h2 id="First-spider"><a href="#First-spider" class="headerlink" title="First spider"></a>First spider</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuotesSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">"quotes"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span><span class="params">(self)</span>:</span></span><br><span class="line">        urls = [</span><br><span class="line">            <span class="string">'http://quotes.toscrape.com/page/1/'</span>,</span><br><span class="line">            <span class="string">'http://quotes.toscrape.com/page/2/'</span>,</span><br><span class="line">        ]</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(url=url, callback=self.parse)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        page = response.url.split(<span class="string">"/"</span>)[<span class="number">-2</span>]</span><br><span class="line">        filename = <span class="string">'quotes-%s.html'</span> % page</span><br><span class="line">        <span class="keyword">with</span> open(filename, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(response.body)</span><br><span class="line">        self.log(<span class="string">'Saved file %s'</span> % filename)</span><br></pre></td></tr></table></figure><h2 id="Run-spider"><a href="#Run-spider" class="headerlink" title="Run spider"></a>Run spider</h2><p>Go to top level and run:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl quotes</span><br></pre></td></tr></table></figure><p>Start url can also define explictly in variable <strong>start_urls</strong>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuotesSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">"quotes"</span></span><br><span class="line">    start_urls = [</span><br><span class="line">        <span class="string">'http://quotes.toscrape.com/page/1/'</span>,</span><br><span class="line">        <span class="string">'http://quotes.toscrape.com/page/2/'</span>,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        page = response.url.split(<span class="string">"/"</span>)[<span class="number">-2</span>]</span><br><span class="line">        filename = <span class="string">'quotes-%s.html'</span> % page</span><br><span class="line">        <span class="keyword">with</span> open(filename, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(response.body)</span><br></pre></td></tr></table></figure><h2 id="Extracting-data"><a href="#Extracting-data" class="headerlink" title="Extracting data"></a>Extracting data</h2><p>response.css() method can do this.</p><p>It returns a <strong>Selectlist</strong> object. Can be stripped and queried further.</p><p><strong>Methods</strong></p><ul><li>getall()</li><li>get()</li><li>re(): Extract using regular expressions.</li></ul><p>response.xpath() method is more under-the-hood.</p><p>A example below:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> quote <span class="keyword">in</span> response.css(<span class="string">'div.quote'</span>):</span><br><span class="line">        <span class="keyword">yield</span> &#123;</span><br><span class="line">            <span class="string">'text'</span>: quote.css(<span class="string">'span.text::text'</span>).get(),</span><br><span class="line">            <span class="string">'author'</span>: quote.css(<span class="string">'small.author::text'</span>).get(),</span><br><span class="line">            <span class="string">'tags'</span>: quote.css(<span class="string">'div.tags a.tag::text'</span>).getall(),</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="Store-the-scraped-data"><a href="#Store-the-scraped-data" class="headerlink" title="Store the scraped data"></a>Store the scraped data</h2><blockquote><p>For historic reasons, Scrapy appends to a given file instead of overwriting its contents. If you run this command twice without removing the file before the second time, you’ll end up with a broken JSON file.</p></blockquote><p>The JSON lines format is easy to append.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl quotes -o quotes.json</span><br><span class="line">scrapy crawl quotes -o quotes.jl  <span class="comment"># JSON lines</span></span><br></pre></td></tr></table></figure><p>All formats for <a href="https://docs.scrapy.org/en/latest/topics/feed-exports.html#topics-feed-exports" target="_blank" rel="noopener">Feed exports</a></p><h2 id="Follow-links"><a href="#Follow-links" class="headerlink" title="Follow links"></a>Follow links</h2><p>With attrib[] attribute, or select in the css() method.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; response.css(<span class="string">'li.next a::attr(href)'</span>).get()</span><br><span class="line"><span class="string">'/page/2/'</span></span><br><span class="line">&gt;&gt;&gt; response.css(<span class="string">'li.next a'</span>).attrib[<span class="string">'href'</span>]</span><br><span class="line"><span class="string">'/page/2'</span></span><br></pre></td></tr></table></figure><p><strong>Recursively follow the “Next Page” link</strong></p><p>Build the full absolute URL with urljoin() method.</p><blockquote><p>What you see here is Scrapy’s mechanism of following links: when you yield a Request in a callback method, Scrapy will schedule that request to be sent and register a callback method to be executed when that request finishes.</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def parse(self, response):</span><br><span class="line">    <span class="keyword">for</span> quote <span class="keyword">in</span> response.css(<span class="string">'div.quote'</span>):</span><br><span class="line">        yield &#123;</span><br><span class="line">            <span class="string">'text'</span>: quote.css(<span class="string">'span.text::text'</span>).get(),</span><br><span class="line">            <span class="string">'author'</span>: quote.css(<span class="string">'small.author::text'</span>).get(),</span><br><span class="line">            <span class="string">'tags'</span>: quote.css(<span class="string">'div.tags a.tag::text'</span>).getall(),</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    next_page = response.css(<span class="string">'li.next a::attr(href)'</span>).get()</span><br><span class="line">    <span class="keyword">if</span> next_page is not None:</span><br><span class="line">        next_page = response.urljoin(next_page)</span><br><span class="line">        yield scrapy.Request(next_page, callback=self.parse)</span><br></pre></td></tr></table></figure><p>response.follow support relative URLs directly. Otherwise you can pass a selector directly(with necessary attributes).</p><p>For &lt;a&gt; method there’s a shortcut: follow their href attribute automatically.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> next_page is not None:</span><br><span class="line">    yield response.follow(next_page, callback=self.parse)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pass a selector</span></span><br><span class="line"><span class="keyword">for</span> href <span class="keyword">in</span> response.css(<span class="string">'li.next a::attr(href)'</span>):</span><br><span class="line">    yield response.follow(href, callback=self.parse)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># follow &lt;a&gt; elements directly</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> response.css(<span class="string">'li.next a'</span>):</span><br><span class="line">    yield response.follow(a, callback=self.parse)</span><br></pre></td></tr></table></figure><h2 id="For-Deeper-Scraping"><a href="#For-Deeper-Scraping" class="headerlink" title="For Deeper Scraping"></a>For Deeper Scraping</h2><p>With the callback variable of response.follow() or scrapy.Request() method.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthorSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'author'</span></span><br><span class="line"></span><br><span class="line">    start_urls = [<span class="string">'http://quotes.toscrape.com/'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="comment"># follow links to author pages</span></span><br><span class="line">        <span class="keyword">for</span> href <span class="keyword">in</span> response.css(<span class="string">'.author + a::attr(href)'</span>):</span><br><span class="line">            <span class="keyword">yield</span> response.follow(href, self.parse_author)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># follow pagination links</span></span><br><span class="line">        <span class="keyword">for</span> href <span class="keyword">in</span> response.css(<span class="string">'li.next a::attr(href)'</span>):</span><br><span class="line">            <span class="keyword">yield</span> response.follow(href, self.parse)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse_author</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">extract_with_css</span><span class="params">(query)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> response.css(query).get(default=<span class="string">''</span>).strip()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">yield</span> &#123;</span><br><span class="line">            <span class="string">'name'</span>: extract_with_css(<span class="string">'h3.author-title::text'</span>),</span><br><span class="line">            <span class="string">'birthdate'</span>: extract_with_css(<span class="string">'.author-born-date::text'</span>),</span><br><span class="line">            <span class="string">'bio'</span>: extract_with_css(<span class="string">'.author-description::text'</span>),</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>Q: How can I pass some information of current page to the next page to be parsed?</p><h2 id="Arguments"><a href="#Arguments" class="headerlink" title="Arguments"></a>Arguments</h2><p>Spiders can have <a href="https://docs.scrapy.org/en/latest/topics/spiders.html#spiderargs" target="_blank" rel="noopener">arguments</a>.</p><h2 id="Item-Pipeline"><a href="#Item-Pipeline" class="headerlink" title="Item Pipeline"></a>Item Pipeline</h2><blockquote><p>After an item has been scraped by a spider, it is sent to the Item Pipeline which processes it through several components that are executed sequentially.</p></blockquote><p><a href="https://docs.scrapy.org/en/latest/topics/item-pipeline.html#topics-item-pipeline" target="_blank" rel="noopener">more information</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Resources&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.datacamp.com/community/tutorials/making-web-crawlers-scrapy-python&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Making Web Crawlers Using Scrapy for Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.scrapy.org/en/latest/intro/overview.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;docs of Scrapy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/geekan/scrapy-examples/tree/master/doubanbook&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;geekan/scrapy-examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://ofey404.github.io/tags/python/"/>
    
  </entry>
  
</feed>
